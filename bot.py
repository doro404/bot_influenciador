import os
import asyncio
import logging
import aiohttp
import aiofiles
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from mysql.connector import Error
from database import create_connection
from flow_manager import (
    FlowManager, 
    create_admin_keyboard, 
    create_flow_management_keyboard, 
    create_message_step_keyboard,
    create_simple_flow_control_keyboard,
    create_default_flow_keyboard,
    create_delete_flow_keyboard,
    create_edit_flow_keyboard,
    create_edit_step_keyboard,
    create_config_keyboard,
    create_config_phone_keyboard,
    create_config_email_keyboard,
    create_config_signup_keyboard,
    create_config_welcome_keyboard,
    create_webhook_keyboard,
    create_stats_keyboard,
    get_general_stats,
    generate_excel_report,
    get_step_details,
    update_step_content,
    update_step_media_url,
    delete_step_completely,
    get_config_value,
    set_config_value,
    is_phone_collection_enabled,
    is_email_collection_enabled,
    is_signup_required,
    is_welcome_enabled,
    get_welcome_message,
    send_welcome_message,
    is_webhook_enabled,
    get_webhook_url,
    send_webhook,
    is_webhook_already_sent,
    mark_webhook_as_sent,
    get_flow_content
)

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configura√ß√£o da pasta de uploads
UPLOADS_DIR = Path("uploads")
UPLOADS_DIR.mkdir(exist_ok=True)

async def download_and_save_file(file_url, file_type, file_id):
    """
    Baixa um arquivo do Telegram e salva localmente
    
    Args:
        file_url: URL do arquivo no Telegram
        file_type: Tipo do arquivo (image, video, video_note, document)
        file_id: ID do arquivo no Telegram
    
    Returns:
        str: Caminho local do arquivo salvo ou None se houver erro
    """
    try:
        # Criar pasta espec√≠fica para o tipo de arquivo
        type_dir = UPLOADS_DIR / file_type
        type_dir.mkdir(exist_ok=True)
        
        # Gerar nome do arquivo baseado no file_id
        if file_type == 'image':
            extension = '.jpg'
        elif file_type == 'video':
            extension = '.mp4'
        elif file_type == 'video_note':
            extension = '.mp4'
        elif file_type == 'document':
            extension = '.pdf'  # Padr√£o, pode ser alterado
        else:
            extension = '.bin'
        
        filename = f"{file_id}{extension}"
        file_path = type_dir / filename
        
        # Garantir que o caminho use barras normais
        file_path = Path(str(file_path).replace('\\', '/'))
        
        # Verificar se o arquivo j√° existe
        if file_path.exists():
            print(f"Arquivo j√° existe: {file_path}")
            return str(file_path)
        
        # Baixar o arquivo
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as response:
                if response.status == 200:
                    # Salvar o arquivo
                    async with aiofiles.open(file_path, 'wb') as f:
                        await f.write(await response.read())
                    
                    print(f"Arquivo salvo: {file_path}")
                    return str(file_path)
                else:
                    print(f"Erro ao baixar arquivo: HTTP {response.status}")
                    return None
                    
    except Exception as e:
        print(f"Erro ao baixar e salvar arquivo: {e}")
        return None

def normalize_path(path):
    """Normaliza o caminho do arquivo para usar barras normais"""
    return str(path).replace('\\', '/')

# Fun√ß√£o para validar requisitos do video note
async def validate_video_note_requirements(file_data, file_path=None):
    """
    Valida se o video note atende aos requisitos obrigat√≥rios do Telegram:
    - Formato Quadrado (1:1 aspect ratio)
    - Dura√ß√£o M√°xima: 60 segundos
    - Tamanho M√°ximo: 100MB para bots
    - Codec: H.264/MPEG-4
    - Resolu√ß√£o recomendada: 512x512 px
    """
    try:
        import cv2
        import tempfile
        from moviepy.editor import VideoFileClip
        
        print(f"üîç DEBUG: Iniciando valida√ß√£o de video note")
        
        # Verificar tamanho do arquivo
        file_size = len(file_data) if file_data else os.path.getsize(file_path)
        file_size_mb = file_size / (1024 * 1024)
        
        print(f"üîç DEBUG: Tamanho do arquivo: {file_size_mb:.2f} MB")
        
        if file_size_mb > 100:
            return False, f"‚ùå Tamanho do arquivo ({file_size_mb:.2f} MB) excede o limite de 100MB para bots"
        
        # Criar arquivo tempor√°rio para an√°lise
        with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_file:
            if file_data:
                temp_file.write(file_data)
            else:
                with open(file_path, 'rb') as f:
                    temp_file.write(f.read())
            temp_file_path = temp_file.name
        
        try:
            # Verificar dura√ß√£o
            video_clip = VideoFileClip(temp_file_path)
            duration = video_clip.duration
            
            print(f"üîç DEBUG: Dura√ß√£o do v√≠deo: {duration:.2f} segundos")
            
            if duration > 60:
                video_clip.close()
                return False, f"‚ùå Dura√ß√£o do v√≠deo ({duration:.2f}s) excede o limite de 60 segundos"
            
            # Verificar dimens√µes
            width = video_clip.w
            height = video_clip.h
            
            print(f"üîç DEBUG: Dimens√µes do v√≠deo: {width}x{height}")
            
            # Verificar se √© quadrado (1:1 aspect ratio)
            aspect_ratio = width / height
            if not (0.95 <= aspect_ratio <= 1.05):  # Permitir pequena toler√¢ncia
                video_clip.close()
                return False, f"‚ùå V√≠deo n√£o √© quadrado (aspect ratio: {aspect_ratio:.2f}). Deve ser 1:1"
            
            # Verificar resolu√ß√£o recomendada (512x512)
            if width < 256 or height < 256:
                video_clip.close()
                return False, f"‚ùå Resolu√ß√£o muito baixa ({width}x{height}). Recomendado: 512x512"
            
            # Verificar codec usando OpenCV
            cap = cv2.VideoCapture(temp_file_path)
            fourcc = int(cap.get(cv2.CAP_PROP_FOURCC))
            codec_name = "".join([chr((fourcc >> 8 * i) & 0xFF) for i in range(4)])
            cap.release()
            
            print(f"üîç DEBUG: Codec detectado: {codec_name}")
            
            # Verificar se √© H.264/MPEG-4
            # Aceitar varia√ß√µes do codec H.264 (h264, H264, avc1, etc.)
            h264_variants = ['avc1', 'H264', 'h264', 'mp4v', 'XVID', 'mp4a']
            if codec_name.lower() not in [codec.lower() for codec in h264_variants]:
                video_clip.close()
                return False, f"‚ùå Codec n√£o suportado: {codec_name}. Use H.264/MPEG-4"
            
            video_clip.close()
            
            print(f"üîç DEBUG: ‚úÖ Video note atende a todos os requisitos")
            return True, "‚úÖ Video note v√°lido"
            
        finally:
            # Limpar arquivo tempor√°rio
            if os.path.exists(temp_file_path):
                os.unlink(temp_file_path)
                
    except ImportError as e:
        print(f"üîç DEBUG: Bibliotecas de valida√ß√£o n√£o dispon√≠veis: {e}")
        # Se as bibliotecas n√£o estiverem dispon√≠veis, fazer valida√ß√£o b√°sica
        file_size = len(file_data) if file_data else os.path.getsize(file_path)
        file_size_mb = file_size / (1024 * 1024)
        
        if file_size_mb > 100:
            return False, f"‚ùå Tamanho do arquivo ({file_size_mb:.2f} MB) excede o limite de 100MB para bots"
        
        return True, "‚úÖ Valida√ß√£o b√°sica passou (bibliotecas n√£o dispon√≠veis)"
        
    except Exception as e:
        print(f"üîç DEBUG: Erro na valida√ß√£o: {e}")
        return False, f"‚ùå Erro na valida√ß√£o: {str(e)}"

# Fun√ß√£o para converter v√≠deo para formato de video note
async def convert_video_to_video_note(file_data, file_path=None):
    """
    Converte um v√≠deo para o formato de video note do Telegram:
    - Redimensiona para 512x512 (quadrado)
    - Limita dura√ß√£o para 60 segundos
    - Converte para H.264/MPEG-4
    - Comprime para menos de 100MB
    """
    try:
        import cv2
        import tempfile
        from moviepy.editor import VideoFileClip, CompositeVideoClip
        from moviepy.video.fx import resize
        
        print(f"üîß DEBUG: Iniciando convers√£o de v√≠deo para video note")
        
        # Criar arquivo tempor√°rio para processamento
        with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_input:
            if file_data:
                temp_input.write(file_data)
            else:
                with open(file_path, 'rb') as f:
                    temp_input.write(f.read())
            temp_input_path = temp_input.name
        
        # Criar arquivo tempor√°rio para sa√≠da
        with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_output:
            temp_output_path = temp_output.name
        
        try:
            # Carregar v√≠deo
            video_clip = VideoFileClip(temp_input_path)
            
            # Verificar dura√ß√£o e cortar se necess√°rio
            if video_clip.duration > 60:
                print(f"üîß DEBUG: Cortando v√≠deo de {video_clip.duration:.2f}s para 60s")
                video_clip = video_clip.subclip(0, 60)
            
            # Redimensionar para 512x512 (quadrado)
            print(f"üîß DEBUG: Redimensionando de {video_clip.w}x{video_clip.h} para 512x512")
            video_clip = video_clip.resize((512, 512))
            
            # Configurar codec e qualidade para otimizar tamanho
            video_clip.write_videofile(
                temp_output_path,
                codec='libx264',
                audio_codec='aac',
                bitrate='400k',  # Bitrate ainda mais baixo para garantir < 100MB
                fps=20,  # FPS reduzido para economizar espa√ßo
                preset='ultrafast',  # Preset r√°pido
                threads=2,
                ffmpeg_params=['-crf', '28']  # Compress√£o adicional
            )
            
            video_clip.close()
            
            # Verificar tamanho do arquivo convertido
            converted_size = os.path.getsize(temp_output_path)
            converted_size_mb = converted_size / (1024 * 1024)
            
            print(f"üîß DEBUG: Arquivo convertido: {converted_size_mb:.2f} MB")
            
            # Se ainda estiver muito grande, comprimir mais
            if converted_size_mb > 100:
                print(f"üîß DEBUG: Comprimindo mais para reduzir tamanho...")
                
                # Ler o arquivo convertido
                with open(temp_output_path, 'rb') as f:
                    video_data = f.read()
                
                # Tentar com bitrate ainda menor
                video_clip = VideoFileClip(temp_output_path)
                video_clip.write_videofile(
                    temp_output_path,
                    codec='libx264',
                    audio_codec='aac',
                    bitrate='250k',  # Bitrate ainda menor
                    fps=18,  # FPS ainda menor
                    preset='ultrafast',
                    threads=2,
                    ffmpeg_params=['-crf', '30']  # Compress√£o mais agressiva
                )
                video_clip.close()
                
                # Verificar tamanho final
                final_size = os.path.getsize(temp_output_path)
                final_size_mb = final_size / (1024 * 1024)
                print(f"üîß DEBUG: Tamanho final ap√≥s compress√£o: {final_size_mb:.2f} MB")
                
                if final_size_mb > 100:
                    print(f"üîß DEBUG: Ainda muito grande, tentando sem √°udio...")
                    # Tentar sem √°udio
                    video_clip = VideoFileClip(temp_output_path)
                    video_clip.write_videofile(
                        temp_output_path,
                        codec='libx264',
                        audio=False,  # Sem √°udio
                        bitrate='150k',  # Bitrate muito baixo
                        fps=15,
                        preset='ultrafast',
                        threads=2,
                        ffmpeg_params=['-crf', '32', '-movflags', '+faststart']  # Compress√£o m√°xima + otimiza√ß√£o
                    )
                    video_clip.close()
            
            # Ler o arquivo convertido
            with open(temp_output_path, 'rb') as f:
                converted_data = f.read()
            
            final_size_mb = len(converted_data) / (1024 * 1024)
            print(f"üîß DEBUG: ‚úÖ Convers√£o conclu√≠da: {final_size_mb:.2f} MB")
            
            return True, converted_data, f"‚úÖ V√≠deo convertido com sucesso ({final_size_mb:.2f} MB)"
            
        finally:
            # Limpar arquivos tempor√°rios
            if os.path.exists(temp_input_path):
                os.unlink(temp_input_path)
            if os.path.exists(temp_output_path):
                os.unlink(temp_output_path)
                
    except ImportError as e:
        print(f"üîß DEBUG: Bibliotecas de convers√£o n√£o dispon√≠veis: {e}")
        return False, None, "‚ùå Bibliotecas de convers√£o n√£o dispon√≠veis"
        
    except Exception as e:
        print(f"üîß DEBUG: Erro na convers√£o: {e}")
        return False, None, f"‚ùå Erro na convers√£o: {str(e)}"

# Fun√ß√£o para criar as tabelas
def create_tables():
    connection = create_connection()
    if connection is None:
        return False
    
    try:
        cursor = connection.cursor()
        
        # Criar tabela bot_config
        create_bot_config_table = """
        CREATE TABLE IF NOT EXISTS bot_config (
            id INT AUTO_INCREMENT PRIMARY KEY,
            config_key VARCHAR(100) NOT NULL UNIQUE,
            config_value TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        )
        """
        
        # Criar tabela users
        create_users_table = """
        CREATE TABLE IF NOT EXISTS users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            telegram_id BIGINT NOT NULL UNIQUE,
            username VARCHAR(100),
            first_name VARCHAR(100),
            last_name VARCHAR(100),
            name VARCHAR(200),
            phone VARCHAR(20),
            email VARCHAR(200),
            additional_data TEXT,
            is_active BOOLEAN DEFAULT TRUE,
            welcome_video_sent BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        )
        """
        
        cursor.execute(create_bot_config_table)
        cursor.execute(create_users_table)
        connection.commit()
        
        print("Tabelas criadas com sucesso!")
        return True
        
    except Error as e:
        print(f"Erro ao criar tabelas: {e}")
        return False
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

# Fun√ß√£o para inserir/atualizar usu√°rio
def save_user(telegram_id, username=None, first_name=None, last_name=None):
    connection = create_connection()
    if connection is None:
        return False
    
    try:
        cursor = connection.cursor()
        
        # Verificar se o usu√°rio j√° existe
        check_user = "SELECT id FROM users WHERE telegram_id = %s"
        cursor.execute(check_user, (telegram_id,))
        user_exists = cursor.fetchone()
        
        if user_exists:
            # Atualizar usu√°rio existente
            update_user = """
            UPDATE users 
            SET username = %s, first_name = %s, last_name = %s, updated_at = CURRENT_TIMESTAMP
            WHERE telegram_id = %s
            """
            cursor.execute(update_user, (username, first_name, last_name, telegram_id))
        else:
            # Inserir novo usu√°rio
            insert_user = """
            INSERT INTO users (telegram_id, username, first_name, last_name)
            VALUES (%s, %s, %s, %s)
            """
            cursor.execute(insert_user, (telegram_id, username, first_name, last_name))
        
        connection.commit()
        return True
        
    except Error as e:
        print(f"Erro ao salvar usu√°rio: {e}")
        return False
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

# Handlers do bot
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start"""
    user = update.effective_user
    
    # Salvar usu√°rio no banco de dados
    save_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # Enviar webhook de acesso ao bot
    user_data = {
        'telegram_id': user.id,
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name
    }
    send_webhook('bot_access', user_data)
    
    # Verificar configura√ß√µes de coleta de dados
    require_signup = is_signup_required()
    collect_phone = is_phone_collection_enabled()
    collect_email = is_email_collection_enabled()
    
    print(f"üîç DEBUG: start - Usu√°rio {user.id} - Configura√ß√µes:")
    print(f"üîç DEBUG: require_signup: {require_signup}")
    print(f"üîç DEBUG: collect_phone: {collect_phone}")
    print(f"üîç DEBUG: collect_email: {collect_email}")
    
    # Verificar se o usu√°rio precisa de cadastro
    needs_signup = require_signup or collect_phone or collect_email
    print(f"üîç DEBUG: needs_signup: {needs_signup}")
    
    # Verificar se existe um fluxo padr√£o
    flow_manager = FlowManager()
    default_flow = flow_manager.get_default_flow()
    print(f"üîç DEBUG: default_flow: {default_flow}")
    
    if needs_signup:
        # Verificar se o usu√°rio j√° tem as informa√ß√µes necess√°rias
        user_data = get_user_data(user.id)
        print(f"üîç DEBUG: Dados do usu√°rio {user.id}: {user_data}")
        
        missing_data = []
        if require_signup and not user_data.get('name'):
            missing_data.append("nome")
        if collect_phone and not user_data.get('phone'):
            missing_data.append("telefone")
        if collect_email and not user_data.get('email'):
            missing_data.append("email")
        
        print(f"üîç DEBUG: Dados faltantes: {missing_data}")
        
        if missing_data:
            # Se h√° dados faltantes, enviar v√≠deo redondo espec√≠fico para cadastro
            # (n√£o enviar mensagem de boas-vindas geral)
            await request_missing_data(update, context, missing_data)
            return
        else:
            # Se n√£o h√° dados faltantes, verificar se h√° fluxo padr√£o
            if default_flow:
                # Executar o fluxo padr√£o completo
                steps = flow_manager.get_flow_steps(default_flow['id'])
                if steps:
                    await execute_complete_flow(update, steps)
                    return
            else:
                # Se n√£o h√° fluxo padr√£o, enviar mensagem de boas-vindas normal
                await send_welcome_message(update, context)
    else:
        # Se n√£o precisa de cadastro, verificar se h√° fluxo padr√£o
        if default_flow:
            # Executar o fluxo padr√£o completo
            steps = flow_manager.get_flow_steps(default_flow['id'])
            if steps:
                await execute_complete_flow(update, steps)
                return
        else:
            # Se n√£o h√° fluxo padr√£o, enviar mensagem de boas-vindas normal
            await send_welcome_message(update, context)
    
    # Se chegou at√© aqui, n√£o h√° fluxo padr√£o nem cadastro necess√°rio
    # Mostrar mensagem de boas-vindas padr√£o
    welcome_message = f"""
    üëã Ol√° {user.first_name}!
    
    Bem-vindo ao Bot Influenciador! üöÄ
    
    Comandos dispon√≠veis:
    /start - Iniciar o bot
    /help - Ver ajuda
    /status - Ver status do bot
    /admin - Painel de administra√ß√£o (apenas admins)
    
    Como posso te ajudar hoje?
    """
    
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /help"""
    help_text = """
    ü§ñ **Bot Influenciador - Ajuda**
    
    **Comandos dispon√≠veis:**
    /start - Iniciar o bot
    /help - Ver esta mensagem de ajuda
    /status - Ver status do bot
    
    **Funcionalidades:**
    - Gerenciamento de usu√°rios
    - Configura√ß√µes personaliz√°veis
    - Sistema de influenciadores
    
    Para mais informa√ß√µes, entre em contato com o administrador.
    """
    
    await update.message.reply_text(help_text)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /status"""
    connection = create_connection()
    if connection is None:
        await update.message.reply_text("‚ùå Erro: N√£o foi poss√≠vel conectar ao banco de dados.")
        return
    
    try:
        cursor = connection.cursor()
        
        # Contar usu√°rios
        cursor.execute("SELECT COUNT(*) FROM users")
        user_count = cursor.fetchone()[0]
        
        # Verificar configura√ß√µes
        cursor.execute("SELECT COUNT(*) FROM bot_config")
        config_count = cursor.fetchone()[0]
        
        status_message = f"""
        üìä **Status do Bot**
        
        ‚úÖ Banco de dados: Conectado
        üë• Usu√°rios registrados: {user_count}
        ‚öôÔ∏è Configura√ß√µes: {config_count}
        
        Bot funcionando normalmente! üöÄ
        """
        
        await update.message.reply_text(status_message)
        
    except Error as e:
        await update.message.reply_text(f"‚ùå Erro ao verificar status: {e}")
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Eco de mensagens"""
    await update.message.reply_text(f"Voc√™ disse: {update.message.text}")

async def handle_contact_shared(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para processar dados de contato e localiza√ß√£o compartilhados"""
    user = update.effective_user
    

    
    # Verificar se est√° esperando por contato
    if 'waiting_for_contact' in context.user_data and context.user_data['waiting_for_contact']:
        contact = update.message.contact
        
        if contact and contact.phone_number:
            # Processar telefone compartilhado
            context.user_data['collected_phone'] = contact.phone_number
            context.user_data.pop('waiting_for_contact', None)
            

            
            # Voltar para a tela de coleta de dados para mostrar bot√µes atualizados
            if 'missing_data' in context.user_data:
                missing_data = context.user_data['missing_data']
                await request_missing_data(update, context, missing_data)
            else:
                # Se n√£o h√° mais dados, finalizar
                await finish_data_collection(update, context)
        else:
            await update.message.reply_text(
                "‚ùå Erro ao processar contato. Tente novamente.",
                reply_markup=ReplyKeyboardRemove()
            )
        return
    else:
        # Contato compartilhado mas n√£o estava esperando

        
        if update.message.contact and update.message.contact.phone_number:
            # Processar telefone compartilhado mesmo assim
            context.user_data['collected_phone'] = update.message.contact.phone_number
            

            
            # Voltar para a tela de coleta de dados para mostrar bot√µes atualizados
            if 'missing_data' in context.user_data:
                missing_data = context.user_data['missing_data']
                await request_missing_data(update, context, missing_data)
            else:
                # Se n√£o h√° mais dados, finalizar
                await finish_data_collection(update, context)
        else:
            await update.message.reply_text(
                "‚ùå Erro ao processar contato. Tente novamente.",
                reply_markup=ReplyKeyboardRemove()
            )
        return
    


async def handle_media_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para processar m√≠dias enviadas (fotos, v√≠deos, documentos)"""
    user = update.effective_user
    flow_manager = FlowManager()
    
    # Verificar se est√° configurando m√≠dia da mensagem de boas-vindas
    if 'configuring_welcome_media' in context.user_data and context.user_data['configuring_welcome_media']:
        if not flow_manager.is_admin(user.id):
            return
        
        try:
            expected_type = context.user_data.get('welcome_media_type', '')
            media_type = None
            file_id = None
            file_url = None
            file_data = None
            
            # Processar foto
            if update.message.photo:
                if expected_type and expected_type != 'photo':
                    await update.message.reply_text(
                        f"‚ùå **Tipo de m√≠dia incorreto.**\n\nEsperado: {expected_type}\nEnviado: foto\n\nEnvie o tipo correto de m√≠dia.",
                        reply_markup=create_config_welcome_keyboard()
                    )
                    return
                
                media_type = 'photo'
                photo = update.message.photo[-1]  # Pegar a maior resolu√ß√£o
                file_id = photo.file_id
                file = await context.bot.get_file(file_id)
                file_url = file.file_path
                
            # Processar v√≠deo
            elif update.message.video:
                if expected_type == 'video_note':
                    # Permitir v√≠deo normal para v√≠deo redondo (convers√£o autom√°tica)
                    media_type = 'video_note'
                elif expected_type and expected_type != 'video':
                    await update.message.reply_text(
                        f"‚ùå **Tipo de m√≠dia incorreto.**\n\nEsperado: {expected_type}\nEnviado: v√≠deo\n\nEnvie o tipo correto de m√≠dia.",
                        reply_markup=create_config_welcome_keyboard()
                    )
                    return
                else:
                    media_type = 'video'
                
                video = update.message.video
                file_id = video.file_id
                file = await context.bot.get_file(file_id)
                file_url = file.file_path
                
            # Processar v√≠deo redondo
            elif update.message.video_note:
                if expected_type and expected_type != 'video_note':
                    await update.message.reply_text(
                        f"‚ùå **Tipo de m√≠dia incorreto.**\n\nEsperado: {expected_type}\nEnviado: v√≠deo redondo\n\nEnvie o tipo correto de m√≠dia.",
                        reply_markup=create_config_welcome_keyboard()
                    )
                    return
                
                media_type = 'video_note'
                video_note = update.message.video_note
                file_id = video_note.file_id
                file = await context.bot.get_file(file_id)
                file_url = file.file_path
                
            # Processar documento
            elif update.message.document:
                if expected_type and expected_type != 'document':
                    await update.message.reply_text(
                        f"‚ùå **Tipo de m√≠dia incorreto.**\n\nEsperado: {expected_type}\nEnviado: documento\n\nEnvie o tipo correto de m√≠dia.",
                        reply_markup=create_config_welcome_keyboard()
                    )
                    return
                
                media_type = 'document'
                document = update.message.document
                file_id = document.file_id
                file = await context.bot.get_file(file_id)
                file_url = file.file_path
            
            if media_type and file_id and file_url:
                # Verificar se a URL √© v√°lida
                if not file_url.startswith('http'):
                    file_url = f"https://api.telegram.org/file/bot{context.bot.token}/{file_url}"
                
                # Baixar e salvar arquivo localmente
                local_path = await download_and_save_file(file_url, media_type, file_id)
                
                # Se for v√≠deo redondo e foi enviado um v√≠deo normal, converter
                if media_type == 'video_note' and update.message.video:
                    try:
                        # Baixar o arquivo para convers√£o
                        import requests
                        response = requests.get(file_url)
                        if response.status_code == 200:
                            file_data = response.content
                            
                            # Validar e converter para v√≠deo redondo
                            is_valid, validation_message = await validate_video_note_requirements(file_data)
                            if not is_valid:
                                await update.message.reply_text(
                                    f"‚ö†Ô∏è **V√≠deo n√£o atende aos requisitos:**\n\n{validation_message}\n\n"
                                    f"Deseja converter mesmo assim?",
                                    reply_markup=InlineKeyboardMarkup([
                                        [InlineKeyboardButton("‚úÖ Sim, converter", callback_data="convert_welcome_video_note")],
                                        [InlineKeyboardButton("‚ùå Cancelar", callback_data="config_welcome")]
                                    ])
                                )
                                # Salvar dados tempor√°rios para convers√£o
                                context.user_data['temp_welcome_video_data'] = {
                                    'file_data': file_data,
                                    'local_path': local_path,
                                    'file_url': file_url
                                }
                                return
                            
                            # Converter automaticamente
                            conversion_success, converted_data, conversion_message = await convert_video_to_video_note(file_data)
                            if conversion_success:
                                # Salvar o v√≠deo convertido
                                import os
                                from pathlib import Path
                                UPLOADS_DIR = Path("uploads")
                                video_note_dir = UPLOADS_DIR / "video_note"
                                video_note_dir.mkdir(parents=True, exist_ok=True)
                                
                                temp_filename = f"welcome_video_note_{file_id}.mp4"
                                temp_path = video_note_dir / temp_filename
                                
                                with open(temp_path, 'wb') as f:
                                    f.write(converted_data)
                                
                                local_path = str(temp_path)
                                await update.message.reply_text(
                                    f"‚úÖ **V√≠deo Redondo da Mensagem de Boas-vindas Configurado!**\n\n"
                                    f"O v√≠deo foi convertido automaticamente para formato redondo.\n"
                                    f"Arquivo: {local_path}",
                                    reply_markup=create_config_welcome_keyboard()
                                )
                            else:
                                await update.message.reply_text(
                                    f"‚ùå **Erro na convers√£o:** {conversion_message}\n\nTente novamente.",
                                    reply_markup=create_config_welcome_keyboard()
                                )
                                return
                        else:
                            await update.message.reply_text(
                                "‚ùå **Erro ao baixar v√≠deo para convers√£o.**\n\nTente novamente.",
                                reply_markup=create_config_welcome_keyboard()
                            )
                            return
                    except Exception as e:
                        await update.message.reply_text(
                            f"‚ùå **Erro na convers√£o:** {str(e)}\n\nTente novamente.",
                            reply_markup=create_config_welcome_keyboard()
                        )
                        return
                
                # Salvar configura√ß√µes
                if set_config_value('welcome_media_url', local_path or file_url) and set_config_value('welcome_media_type', media_type):
                    context.user_data.pop('configuring_welcome_media', None)
                    context.user_data.pop('welcome_media_type', None)
                    context.user_data.pop('temp_welcome_video_data', None)
                    
                    media_type_text = {
                        'photo': 'üñºÔ∏è Foto',
                        'video': 'üé¨ V√≠deo',
                        'video_note': '‚≠ï V√≠deo Redondo',
                        'document': 'üìÑ Documento'
                    }.get(media_type, media_type)
                    
                    await update.message.reply_text(
                        f"‚úÖ **{media_type_text} da Mensagem de Boas-vindas Configurado!**\n\n"
                        f"Tipo: {media_type}\n"
                        f"Arquivo: {local_path or file_url}",
                        reply_markup=create_config_welcome_keyboard()
                    )
                else:
                    await update.message.reply_text(
                        "‚ùå **Erro ao salvar m√≠dia da mensagem de boas-vindas.**\n\nTente novamente.",
                        reply_markup=create_config_welcome_keyboard()
                    )
            else:
                expected_type_text = {
                    'photo': 'foto',
                    'video': 'v√≠deo',
                    'video_note': 'v√≠deo redondo',
                    'document': 'documento'
                }.get(expected_type, 'm√≠dia')
                
                await update.message.reply_text(
                    f"‚ùå **Tipo de m√≠dia n√£o suportado.**\n\nEnvie uma {expected_type_text}.",
                    reply_markup=create_config_welcome_keyboard()
                )
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå **Erro ao processar m√≠dia:** {str(e)}\n\nTente novamente.",
                reply_markup=create_config_welcome_keyboard()
            )
        return
    
    if not flow_manager.is_admin(user.id):
        return
    
    # Verificar se est√° configurando etapa
    if 'current_step_type' in context.user_data:
        step_type = context.user_data['current_step_type']
        
        if 'current_step_data' not in context.user_data:
            context.user_data['current_step_data'] = {}
        
        # Processar foto
        if update.message.photo and step_type in ['message_image', 'message_image_button']:
            photo = update.message.photo[-1]  # Pegar a maior resolu√ß√£o
            file_id = photo.file_id
            
            try:
                # Obter URL do arquivo
                file = await context.bot.get_file(file_id)
                file_url = file.file_path
                
                # Verificar se a URL √© v√°lida
                if not file_url.startswith('http'):
                    file_url = f"https://api.telegram.org/file/bot{context.bot.token}/{file_url}"
                
                # Baixar e salvar arquivo localmente
                local_path = await download_and_save_file(file_url, 'image', file_id)
                
                # Salvar informa√ß√µes da m√≠dia
                context.user_data['current_step_data']['media_url'] = local_path or file_url
                context.user_data['current_step_data']['type'] = 'image'
                context.user_data['current_step_data']['file_id'] = file_id  # Backup do file_id
                
                await update.message.reply_text(
                    "üìù **Digite o texto da imagem:**",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                context.user_data['waiting_for_image_text'] = True
                if step_type == 'message_image_button':
                    context.user_data['waiting_for_button'] = True
                    print(f"üîç DEBUG: handle_media_input - step_type: {step_type}, waiting_for_button definido como True")
                else:
                    print(f"üîç DEBUG: handle_media_input - step_type: {step_type}, waiting_for_button N√ÉO definido")
                return
                
            except Exception as e:
                print(f"üîç DEBUG: Erro ao obter arquivo: {e}")
                # Em caso de erro, usar apenas o file_id
                context.user_data['current_step_data']['file_id'] = file_id
                context.user_data['current_step_data']['type'] = 'image'
                
                await update.message.reply_text(
                    "üìù **Digite o texto da imagem:**\n\n‚ö†Ô∏è **Aviso:** Houve um problema ao obter a URL da imagem, mas ela ser√° salva usando o ID interno.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                context.user_data['waiting_for_image_text'] = True
                if step_type == 'message_image_button':
                    context.user_data['waiting_for_button'] = True
                return
        
        # Processar v√≠deo (normal ou para convers√£o para v√≠deo redondo)
        elif update.message.video and step_type in ['message_video', 'message_video_button', 'message_video_note', 'message_video_note_button']:
            video = update.message.video
            file_id = video.file_id
            
            # Determinar o tipo baseado no step_type
            if step_type in ['message_video_note', 'message_video_note_button']:
                target_type = 'video_note'
                message_text = "üìù **Digite o texto do v√≠deo redondo:**"
                waiting_flag = 'waiting_for_video_note_text'
            else:
                target_type = 'video'
                message_text = "üìù **Digite o texto do v√≠deo:**"
                waiting_flag = 'waiting_for_video_text'
            
            try:
                # Obter URL do arquivo
                file = await context.bot.get_file(file_id)
                file_url = file.file_path
                
                # Verificar se a URL √© v√°lida
                if not file_url.startswith('http'):
                    file_url = f"https://api.telegram.org/file/bot{context.bot.token}/{file_url}"
                
                # Baixar e salvar arquivo localmente
                local_path = await download_and_save_file(file_url, target_type, file_id)
                
                # Salvar informa√ß√µes da m√≠dia
                context.user_data['current_step_data']['media_url'] = local_path or file_url
                context.user_data['current_step_data']['type'] = target_type
                context.user_data['current_step_data']['file_id'] = file_id  # Backup do file_id
                
                # Marcar como v√≠deo original se for para v√≠deo redondo
                if step_type in ['message_video_note', 'message_video_note_button']:
                    context.user_data['current_step_data']['original_video'] = True
                
                await update.message.reply_text(
                    message_text,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                context.user_data[waiting_flag] = True
                if step_type in ['message_video_button', 'message_video_note_button']:
                    context.user_data['waiting_for_button'] = True
                return
                
            except Exception as e:
                print(f"üîç DEBUG: Erro ao obter arquivo de v√≠deo: {e}")
                # Em caso de erro, usar apenas o file_id
                context.user_data['current_step_data']['file_id'] = file_id
                context.user_data['current_step_data']['type'] = target_type
                context.user_data['current_step_data']['original_video'] = True
                
                await update.message.reply_text(
                    f"{message_text}\n\n‚ö†Ô∏è **Aviso:** Houve um problema ao obter a URL do v√≠deo, mas ele ser√° salvo usando o ID interno.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                context.user_data[waiting_flag] = True
                if step_type in ['message_video_button', 'message_video_note_button']:
                    context.user_data['waiting_for_button'] = True
                return
        
        # Processar v√≠deo redondo
        elif update.message.video_note and step_type in ['message_video_note', 'message_video_note_button']:
            video_note = update.message.video_note
            file_id = video_note.file_id
            
            # Garantir que current_step_data existe
            if 'current_step_data' not in context.user_data:
                context.user_data['current_step_data'] = {}
            
            try:
                # Obter URL do arquivo
                file = await context.bot.get_file(file_id)
                file_url = file.file_path
                
                # Verificar se a URL √© v√°lida
                if not file_url.startswith('http'):
                    file_url = f"https://api.telegram.org/file/bot{context.bot.token}/{file_url}"
                
                # Baixar arquivo para valida√ß√£o
                async with aiohttp.ClientSession() as session:
                    async with session.get(file_url) as response:
                        if response.status == 200:
                            file_data = await response.read()
                            
                            # Validar requisitos do video note
                            print(f"üîç DEBUG: Validando requisitos do video note...")
                            is_valid, validation_message = await validate_video_note_requirements(file_data)
                            
                            if not is_valid:
                                # Oferecer convers√£o autom√°tica
                                await update.message.reply_text(
                                    f"‚ùå **Video Note Inv√°lido**\n\n{validation_message}\n\n"
                                    "üìã **Requisitos obrigat√≥rios:**\n"
                                    "‚Ä¢ Formato quadrado (1:1)\n"
                                    "‚Ä¢ Dura√ß√£o m√°xima: 60 segundos\n"
                                    "‚Ä¢ Tamanho m√°ximo: 100MB\n"
                                    "‚Ä¢ Codec: H.264/MPEG-4\n"
                                    "‚Ä¢ Resolu√ß√£o recomendada: 512x512px\n\n"
                                    "üîÑ **Deseja converter automaticamente?**",
                                    reply_markup=InlineKeyboardMarkup([
                                        [InlineKeyboardButton("‚úÖ Sim, converter", callback_data="convert_video_note")],
                                        [InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")]
                                    ])
                                )
                                
                                # Salvar dados do v√≠deo para convers√£o
                                context.user_data['video_to_convert'] = {
                                    'file_data': file_data,
                                    'step_type': step_type
                                }
                                return
                            
                            print(f"üîç DEBUG: {validation_message}")
                            
                            # Salvar arquivo localmente ap√≥s valida√ß√£o
                            local_path = await download_and_save_file(file_url, 'video_note', file_id)
                            
                            # Salvar informa√ß√µes da m√≠dia
                            context.user_data['current_step_data']['media_url'] = local_path or file_url
                            context.user_data['current_step_data']['type'] = 'video_note'
                            context.user_data['current_step_data']['file_id'] = file_id  # Backup do file_id
                            
                            await update.message.reply_text(
                                f"‚úÖ **Video Note V√°lido!**\n\n{validation_message}\n\n"
                                "üìù **Digite o texto do v√≠deo redondo:**",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                                ]])
                            )
                            context.user_data['waiting_for_video_note_text'] = True
                            if step_type == 'message_video_note_button':
                                context.user_data['waiting_for_button'] = True
                            return
                        else:
                            raise Exception(f"HTTP {response.status}")
                
            except Exception as e:
                print(f"üîç DEBUG: Erro ao obter arquivo de v√≠deo redondo: {e}")
                # Em caso de erro, usar apenas o file_id
                context.user_data['current_step_data']['file_id'] = file_id
                context.user_data['current_step_data']['type'] = 'video_note'
                
                await update.message.reply_text(
                    "üìù **Digite o texto do v√≠deo redondo:**\n\n‚ö†Ô∏è **Aviso:** Houve um problema ao obter a URL do v√≠deo redondo, mas ele ser√° salvo usando o ID interno.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                context.user_data['waiting_for_video_note_text'] = True
                if step_type == 'message_video_note_button':
                    context.user_data['waiting_for_button'] = True
                return
        
        # Processar documento
        elif update.message.document and step_type in ['message_image', 'message_video', 'message_video_note', 'message_image_button', 'message_video_button', 'message_video_note_button']:
            document = update.message.document
            file_id = document.file_id
            
            try:
                # Obter URL do arquivo
                file = await context.bot.get_file(file_id)
                file_url = file.file_path
                
                if step_type in ['message_image', 'message_image_button']:
                    media_type = 'image'
                elif step_type in ['message_video', 'message_video_button']:
                    media_type = 'video'
                elif step_type in ['message_video_note', 'message_video_note_button']:
                    media_type = 'video_note'
                
                # Verificar se a URL √© v√°lida
                if not file_url.startswith('http'):
                    file_url = f"https://api.telegram.org/file/bot{context.bot.token}/{file_url}"
                
                # Baixar e salvar arquivo localmente
                local_path = await download_and_save_file(file_url, media_type, file_id)
                
                context.user_data['current_step_data']['media_url'] = local_path or file_url
                context.user_data['current_step_data']['type'] = media_type
                
                await update.message.reply_text(
                    f"üìù **Digite o texto do {media_type}:**",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                context.user_data[f'waiting_for_{media_type}_text'] = True
                if step_type in ['message_image_button', 'message_video_button', 'message_video_note_button']:
                    context.user_data['waiting_for_button'] = True
                return
                
            except Exception as e:
                print(f"üîç DEBUG: Erro ao obter arquivo de documento: {e}")
                # Em caso de erro, usar apenas o file_id
                if step_type in ['message_image', 'message_image_button']:
                    media_type = 'image'
                elif step_type in ['message_video', 'message_video_button']:
                    media_type = 'video'
                elif step_type in ['message_video_note', 'message_video_note_button']:
                    media_type = 'video_note'
                
                context.user_data['current_step_data']['file_id'] = file_id
                context.user_data['current_step_data']['type'] = media_type
                
                await update.message.reply_text(
                    f"üìù **Digite o texto do {media_type}:**\n\n‚ö†Ô∏è **Aviso:** Houve um problema ao obter a URL do arquivo, mas ele ser√° salvo usando o ID interno.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                context.user_data[f'waiting_for_{media_type}_text'] = True
                if step_type in ['message_image_button', 'message_video_button', 'message_video_note_button']:
                    context.user_data['waiting_for_button'] = True
                return
    
    # Verificar se est√° editando m√≠dia de etapa
    if 'editing_step_media' in context.user_data and context.user_data['editing_step_media']:
        step_id = context.user_data['editing_step_id']
        
        # Processar foto para edi√ß√£o
        if update.message.photo:
            photo = update.message.photo[-1]  # Pegar a maior resolu√ß√£o
            file_id = photo.file_id
            
            try:
                # Obter URL do arquivo
                file = await context.bot.get_file(file_id)
                file_url = file.file_path
                
                # Verificar se a URL √© v√°lida
                if not file_url.startswith('http'):
                    file_url = f"https://api.telegram.org/file/bot{context.bot.token}/{file_url}"
                
                # Baixar e salvar arquivo localmente
                local_path = await download_and_save_file(file_url, 'image', file_id)
                
                if update_step_media_url(step_id, local_path or file_url):
                    context.user_data.pop('editing_step_media', None)
                    context.user_data.pop('editing_step_id', None)
                    
                    await update.message.reply_text(
                        "‚úÖ **M√≠dia da Etapa Atualizada!**\n\nA nova imagem foi salva com sucesso.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                        ]])
                    )
                else:
                    await update.message.reply_text(
                        "‚ùå Erro ao atualizar m√≠dia da etapa.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                        ]])
                    )
                return
                
            except Exception as e:
                print(f"üîç DEBUG: Erro ao obter arquivo para edi√ß√£o: {e}")
                await update.message.reply_text(
                    "‚ùå **Erro ao processar imagem!**\n\nHouve um problema de conex√£o. Tente novamente ou envie uma imagem menor.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                    ]])
                )
                return
        
        # Processar v√≠deo para edi√ß√£o
        elif update.message.video:
            video = update.message.video
            file_id = video.file_id
            
            try:
                # Obter URL do arquivo
                file = await context.bot.get_file(file_id)
                file_url = file.file_path
                
                # Verificar se a URL √© v√°lida
                if not file_url.startswith('http'):
                    file_url = f"https://api.telegram.org/file/bot{context.bot.token}/{file_url}"
                
                # Baixar e salvar arquivo localmente
                local_path = await download_and_save_file(file_url, 'video', file_id)
                
                if update_step_media_url(step_id, local_path or file_url):
                    context.user_data.pop('editing_step_media', None)
                    context.user_data.pop('editing_step_id', None)
                    
                    await update.message.reply_text(
                        "‚úÖ **M√≠dia da Etapa Atualizada!**\n\nO novo v√≠deo foi salvo com sucesso.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                        ]])
                    )
                else:
                    await update.message.reply_text(
                        "‚ùå Erro ao atualizar m√≠dia da etapa.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                        ]])
                    )
                return
                
            except Exception as e:
                print(f"üîç DEBUG: Erro ao obter arquivo de v√≠deo para edi√ß√£o: {e}")
                await update.message.reply_text(
                    "‚ùå **Erro ao processar v√≠deo!**\n\nHouve um problema de conex√£o. Tente novamente ou envie um v√≠deo menor.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                    ]])
                )
                return
        
        # Processar v√≠deo redondo para edi√ß√£o
        elif update.message.video_note:
            video_note = update.message.video_note
            file_id = video_note.file_id
            
            try:
                # Obter URL do arquivo
                file = await context.bot.get_file(file_id)
                file_url = file.file_path
                
                # Verificar se a URL √© v√°lida
                if not file_url.startswith('http'):
                    file_url = f"https://api.telegram.org/file/bot{context.bot.token}/{file_url}"
                
                # Baixar arquivo para valida√ß√£o
                async with aiohttp.ClientSession() as session:
                    async with session.get(file_url) as response:
                        if response.status == 200:
                            file_data = await response.read()
                            
                            # Validar requisitos do video note
                            print(f"üîç DEBUG: Validando requisitos do video note para edi√ß√£o...")
                            is_valid, validation_message = await validate_video_note_requirements(file_data)
                            
                            if not is_valid:
                                await update.message.reply_text(
                                    f"‚ùå **Video Note Inv√°lido**\n\n{validation_message}\n\n"
                                    "üìã **Requisitos obrigat√≥rios:**\n"
                                    "‚Ä¢ Formato quadrado (1:1)\n"
                                    "‚Ä¢ Dura√ß√£o m√°xima: 60 segundos\n"
                                    "‚Ä¢ Tamanho m√°ximo: 100MB\n"
                                    "‚Ä¢ Codec: H.264/MPEG-4\n"
                                    "‚Ä¢ Resolu√ß√£o recomendada: 512x512px",
                                    reply_markup=InlineKeyboardMarkup([[
                                        InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                                    ]])
                                )
                                return
                            
                            print(f"üîç DEBUG: {validation_message}")
                            
                            # Salvar arquivo localmente ap√≥s valida√ß√£o
                            local_path = await download_and_save_file(file_url, 'video_note', file_id)
                            
                            if update_step_media_url(step_id, local_path or file_url):
                                context.user_data.pop('editing_step_media', None)
                                context.user_data.pop('editing_step_id', None)
                                
                                await update.message.reply_text(
                                    f"‚úÖ **M√≠dia da Etapa Atualizada!**\n\n{validation_message}\n\nO novo v√≠deo redondo foi salvo com sucesso.",
                                    reply_markup=InlineKeyboardMarkup([[
                                        InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                                    ]])
                                )
                            else:
                                await update.message.reply_text(
                                    "‚ùå Erro ao atualizar m√≠dia da etapa.",
                                    reply_markup=InlineKeyboardMarkup([[
                                        InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                                    ]])
                                )
                            return
                        else:
                            raise Exception(f"HTTP {response.status}")
                
            except Exception as e:
                print(f"üîç DEBUG: Erro ao obter arquivo de v√≠deo redondo para edi√ß√£o: {e}")
                await update.message.reply_text(
                    "‚ùå **Erro ao processar v√≠deo redondo!**\n\nHouve um problema de conex√£o. Tente novamente ou envie um v√≠deo menor.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                    ]])
                )
                return
        
        # Processar documento para edi√ß√£o
        elif update.message.document:
            document = update.message.document
            file_id = document.file_id
            
            try:
                # Obter URL do arquivo
                file = await context.bot.get_file(file_id)
                file_url = file.file_path
                
                # Verificar se a URL √© v√°lida
                if not file_url.startswith('http'):
                    file_url = f"https://api.telegram.org/file/bot{context.bot.token}/{file_url}"
                
                # Baixar e salvar arquivo localmente
                local_path = await download_and_save_file(file_url, 'document', file_id)
                
                if update_step_media_url(step_id, local_path or file_url):
                    context.user_data.pop('editing_step_media', None)
                    context.user_data.pop('editing_step_id', None)
                    
                    await update.message.reply_text(
                        "‚úÖ **M√≠dia da Etapa Atualizada!**\n\nO novo arquivo foi salvo com sucesso.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                        ]])
                    )
                else:
                    await update.message.reply_text(
                        "‚ùå Erro ao atualizar m√≠dia da etapa.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                        ]])
                    )
                return
                
            except Exception as e:
                print(f"üîç DEBUG: Erro ao obter arquivo de documento para edi√ß√£o: {e}")
                await update.message.reply_text(
                    "‚ùå **Erro ao processar arquivo!**\n\nHouve um problema de conex√£o. Tente novamente ou envie um arquivo menor.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                    ]])
                )
                return

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para processar entrada de texto durante cria√ß√£o de fluxos"""
    user = update.effective_user
    text = update.message.text
    flow_manager = FlowManager()
    
    print(f"DEBUG: ENTRANDO NA FUN√á√ÉO handle_text_input - Texto: {text}")
    
    # Verificar se est√° configurando mensagem de boas-vindas
    if 'configuring_welcome_text' in context.user_data and context.user_data['configuring_welcome_text']:
        if set_config_value('welcome_text', text):
            context.user_data.pop('configuring_welcome_text', None)
            await update.message.reply_text(
                "‚úÖ **Texto da Mensagem de Boas-vindas Salvo!**\n\n"
                f"Texto configurado:\n{text}",
                reply_markup=create_config_welcome_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå **Erro ao salvar texto da mensagem de boas-vindas.**\n\nTente novamente.",
                reply_markup=create_config_welcome_keyboard()
            )
        return
    
    # Verificar se est√° coletando dados do usu√°rio (n√£o apenas admins)
    if 'waiting_for_name' in context.user_data and context.user_data['waiting_for_name']:
        # Processar nome
        context.user_data['collected_name'] = text
        context.user_data.pop('waiting_for_name', None)
        
        # Remover teclado personalizado
        await update.message.reply_text(
            "‚úÖ Nome salvo!",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # Voltar para a tela de coleta de dados para mostrar bot√µes atualizados
        if 'missing_data' in context.user_data:
            missing_data = context.user_data['missing_data']
            await request_missing_data(update, context, missing_data)
        else:
            # Se n√£o h√° mais dados, finalizar
            await finish_data_collection(update, context)
        return
    
    elif 'waiting_for_phone' in context.user_data and context.user_data['waiting_for_phone']:
        # Processar telefone
        context.user_data['collected_phone'] = text
        context.user_data.pop('waiting_for_phone', None)
        
        # Remover teclado personalizado
        await update.message.reply_text(
            "‚úÖ Telefone salvo!",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # Voltar para a tela de coleta de dados para mostrar bot√µes atualizados
        if 'missing_data' in context.user_data:
            missing_data = context.user_data['missing_data']
            await request_missing_data(update, context, missing_data)
        else:
            # Se n√£o h√° mais dados, finalizar
            await finish_data_collection(update, context)
        return
    
    elif 'waiting_for_email' in context.user_data and context.user_data['waiting_for_email']:
        # Processar email
        context.user_data['collected_email'] = text
        context.user_data.pop('waiting_for_email', None)
        
        # Remover teclado personalizado
        await update.message.reply_text(
            "‚úÖ Email salvo!",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # Voltar para a tela de coleta de dados para mostrar bot√µes atualizados
        if 'missing_data' in context.user_data:
            missing_data = context.user_data['missing_data']
            await request_missing_data(update, context, missing_data)
        else:
            # Se n√£o h√° mais dados, finalizar
            await finish_data_collection(update, context)
        return
    
    elif 'waiting_for_email_or_contact' in context.user_data and context.user_data['waiting_for_email_or_contact']:
        # Processar email ou contato
        if text == "üìß Digitar Email":
            # Usu√°rio escolheu digitar email
            await update.message.reply_text(
                "üìß **Digite seu email:**\n\nExemplo: usuario@exemplo.com",
                reply_markup=ReplyKeyboardRemove()
            )
            context.user_data.pop('waiting_for_email_or_contact', None)
            context.user_data['waiting_for_email'] = True
        elif text == "üì± Compartilhar Telefone":
            # Usu√°rio escolheu compartilhar telefone
            keyboard = [[KeyboardButton("üì± Compartilhar Telefone", request_contact=True)]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            
            await update.message.reply_text(
                "üì± **Toque no bot√£o abaixo para compartilhar seu telefone:**",
                reply_markup=reply_markup
            )
            context.user_data.pop('waiting_for_email_or_contact', None)
            context.user_data['waiting_for_contact'] = True
        elif text == "üîô Voltar":
            # Usu√°rio escolheu voltar
            await update.message.reply_text(
                "üîô Voltando...",
                reply_markup=ReplyKeyboardRemove()
            )
            
            if 'missing_data' in context.user_data:
                missing_data = context.user_data['missing_data']
                await request_missing_data(update, context, missing_data)
            else:
                await update.message.reply_text("‚ùå Erro na coleta de dados.")
        else:
            # Usu√°rio digitou um email diretamente
            context.user_data['collected_email'] = text
            context.user_data.pop('waiting_for_email_or_contact', None)
            context.user_data['current_data_index'] += 1
            
            # Remover teclado personalizado
            await update.message.reply_text(
                "‚úÖ Email salvo!",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # Verificar se h√° mais dados para coletar
            missing_data = context.user_data.get('missing_data', [])
            current_index = context.user_data['current_data_index']
            
            if current_index >= len(missing_data):
                # Todos os dados foram coletados
                await finish_data_collection(update, context)
        return
    
    # Processar bot√µes do teclado personalizado
    elif text == "üìß Enviar Email":
        # Solicitar email
        keyboard = [
            [KeyboardButton("üîô Voltar")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await update.message.reply_text(
            "üìß **Digite seu email:**\n\nExemplo: usuario@exemplo.com",
            reply_markup=reply_markup
        )
        context.user_data['waiting_for_email'] = True
        return
    

    
    elif text == "‚ùå Cancelar":
        # Cancelar coleta de dados
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå **Coleta de Dados Cancelada**\n\nVoc√™ pode tentar novamente enviando /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    elif text == "üîô Voltar":
        # Voltar para a tela inicial de coleta de dados
        await update.message.reply_text(
            "üîô Voltando...",
            reply_markup=ReplyKeyboardRemove()
        )
        
        if 'missing_data' in context.user_data:
            missing_data = context.user_data['missing_data']
            await request_missing_data(update, context, missing_data)
        else:
            await update.message.reply_text("‚ùå Erro na coleta de dados.")
        return
    
    # Verificar se √© admin para outras funcionalidades
    if not flow_manager.is_admin(user.id):
        print("DEBUG: Usu√°rio n√£o √© admin, saindo da fun√ß√£o")
        return
    
    # Debug: verificar estados atuais
    print(f"DEBUG: Estados atuais - waiting_for_image_text: {context.user_data.get('waiting_for_image_text', False)}")
    print(f"DEBUG: Estados atuais - waiting_for_button_text: {context.user_data.get('waiting_for_button_text', False)}")
    print(f"DEBUG: Estados atuais - waiting_for_button: {context.user_data.get('waiting_for_button', False)}")
    print(f"DEBUG: Estados atuais - waiting_for_video_text: {context.user_data.get('waiting_for_video_text', False)}")
    print(f"DEBUG: Estados atuais - waiting_for_name: {context.user_data.get('waiting_for_name', False)}")
    print(f"DEBUG: Estados atuais - waiting_for_phone: {context.user_data.get('waiting_for_phone', False)}")
    print(f"DEBUG: Estados atuais - waiting_for_email: {context.user_data.get('waiting_for_email', False)}")
    print(f"DEBUG: Texto recebido: {text}")
    
    # Verificar se est√° coletando dados do usu√°rio
    if 'waiting_for_name' in context.user_data and context.user_data['waiting_for_name']:
        # Processar nome
        context.user_data['collected_name'] = text
        context.user_data.pop('waiting_for_name', None)
        context.user_data['current_data_index'] += 1
        
        # Verificar se h√° mais dados para coletar
        missing_data = context.user_data.get('missing_data', [])
        current_index = context.user_data['current_data_index']
        
        if current_index < len(missing_data):
            # Pr√≥ximo dado
            next_data_type = missing_data[current_index]
            if next_data_type == "telefone":
                await update.message.reply_text(
                    "üì± **Digite seu n√∫mero de telefone:**\n\nFormato: (11) 99999-9999",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="cancel_data_collection")
                    ]])
                )
                context.user_data['waiting_for_phone'] = True
            elif next_data_type == "email":
                await update.message.reply_text(
                    "üìß **Digite seu email:**\n\nExemplo: usuario@exemplo.com",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="cancel_data_collection")
                    ]])
                )
                context.user_data['waiting_for_email'] = True
        else:
            # Todos os dados foram coletados
            await finish_data_collection(update, context)
        return
    
    elif 'waiting_for_phone' in context.user_data and context.user_data['waiting_for_phone']:
        # Processar telefone
        context.user_data['collected_phone'] = text
        context.user_data.pop('waiting_for_phone', None)
        context.user_data['current_data_index'] += 1
        
        # Verificar se h√° mais dados para coletar
        missing_data = context.user_data.get('missing_data', [])
        current_index = context.user_data['current_data_index']
        
        if current_index < len(missing_data):
            # Pr√≥ximo dado
            next_data_type = missing_data[current_index]
            if next_data_type == "email":
                await update.message.reply_text(
                    "üìß **Digite seu email:**\n\nExemplo: usuario@exemplo.com",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="cancel_data_collection")
                    ]])
                )
                context.user_data['waiting_for_email'] = True
        else:
            # Todos os dados foram coletados
            await finish_data_collection(update, context)
        return
    
    elif 'waiting_for_email' in context.user_data and context.user_data['waiting_for_email']:
        # Processar email
        context.user_data['collected_email'] = text
        context.user_data.pop('waiting_for_email', None)
        context.user_data['current_data_index'] += 1
        
        # Verificar se h√° mais dados para coletar
        missing_data = context.user_data.get('missing_data', [])
        current_index = context.user_data['current_data_index']
        
        if current_index >= len(missing_data):
            # Todos os dados foram coletados
            await finish_data_collection(update, context)
        return
    
    # Verificar se est√° configurando URL do webhook
    elif 'setting_webhook_url' in context.user_data and context.user_data['setting_webhook_url']:
        # Validar URL
        if text.startswith(('http://', 'https://')):
            if set_config_value('webhook_url', text):
                context.user_data.pop('setting_webhook_url', None)
                await update.message.reply_text(
                    f"‚úÖ **URL do Webhook Definida!**\n\nüîó {text}\n\nO webhook ser√° enviado para esta URL.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="config_webhook")
                    ]])
                )
            else:
                await update.message.reply_text(
                    "‚ùå Erro ao salvar URL do webhook.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="config_webhook")
                    ]])
                )
        else:
            await update.message.reply_text(
                "‚ùå **URL Inv√°lida!**\n\nA URL deve come√ßar com http:// ou https://\n\nTente novamente:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="config_webhook")
                ]])
            )
        return
    
    elif 'changing_webhook_url' in context.user_data and context.user_data['changing_webhook_url']:
        # Validar URL
        if text.startswith(('http://', 'https://')):
            if set_config_value('webhook_url', text):
                context.user_data.pop('changing_webhook_url', None)
                await update.message.reply_text(
                    f"‚úÖ **URL do Webhook Alterada!**\n\nüîó {text}\n\nO webhook ser√° enviado para esta nova URL.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="config_webhook")
                    ]])
                )
            else:
                await update.message.reply_text(
                    "‚ùå Erro ao alterar URL do webhook.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="config_webhook")
                    ]])
                )
        else:
            await update.message.reply_text(
                "‚ùå **URL Inv√°lida!**\n\nA URL deve come√ßar com http:// ou https://\n\nTente novamente:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="config_webhook")
                ]])
            )
        return
    
    # Verificar se est√° editando texto de etapa
    elif 'editing_step_text' in context.user_data and context.user_data['editing_step_text']:
        step_id = context.user_data['editing_step_id']
        
        if update_step_content(step_id, text):
            context.user_data.pop('editing_step_text', None)
            context.user_data.pop('editing_step_id', None)
            
            await update.message.reply_text(
                "‚úÖ **Texto da Etapa Atualizado!**\n\nO conte√∫do foi modificado com sucesso.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                ]])
            )
        else:
            await update.message.reply_text(
                "‚ùå Erro ao atualizar texto da etapa.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                ]])
            )
        return
    
    # Verificar se est√° editando m√≠dia de etapa
    elif 'editing_step_media' in context.user_data and context.user_data['editing_step_media']:
        step_id = context.user_data['editing_step_id']
        
        # Validar URL
        if text.startswith(('http://', 'https://')):
            if update_step_media_url(step_id, text):
                context.user_data.pop('editing_step_media', None)
                context.user_data.pop('editing_step_id', None)
                
                await update.message.reply_text(
                    "‚úÖ **M√≠dia da Etapa Atualizada!**\n\nA URL da m√≠dia foi modificada com sucesso.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                    ]])
                )
            else:
                await update.message.reply_text(
                    "‚ùå Erro ao atualizar m√≠dia da etapa.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                    ]])
                )
        else:
            await update.message.reply_text(
                "‚ùå **URL Inv√°lida!**\n\nA URL deve come√ßar com http:// ou https://\n\nTente novamente:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data=f"edit_step_{step_id}")
                ]])
            )
        return
    
    # Verificar se est√° configurando texto de imagem/v√≠deo (PRIORIDADE ALTA)
    print(f"DEBUG: VERIFICANDO SE√á√ÉO waiting_for_image_text - Condi√ß√£o: {'waiting_for_image_text' in context.user_data} AND {context.user_data.get('waiting_for_image_text', False)}")
    if 'waiting_for_image_text' in context.user_data and context.user_data['waiting_for_image_text']:
        print(f"DEBUG: ENTRANDO NA SE√á√ÉO waiting_for_image_text - Processando texto da imagem: {text}")
        context.user_data['current_step_data']['content'] = text
        context.user_data.pop('waiting_for_image_text', None)
        
        # Verificar se precisa adicionar bot√£o
        if 'waiting_for_button' in context.user_data and context.user_data['waiting_for_button']:
            print("DEBUG: Precisa adicionar bot√£o, solicitando texto do bot√£o")
            print("DEBUG: ENVIANDO MENSAGEM: üîò **Digite o texto do bot√£o:**")
            await update.message.reply_text(
                "üîò **Digite o texto do bot√£o:**",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                ]])
            )
            context.user_data['waiting_for_button_text'] = True
            print("DEBUG: waiting_for_button_text definido como True (linha 522)")
            return
        else:
            print("DEBUG: N√ÉO precisa adicionar bot√£o, salvando etapa diretamente")
            print(f"DEBUG: waiting_for_button existe: {'waiting_for_button' in context.user_data}")
            print(f"DEBUG: waiting_for_button valor: {context.user_data.get('waiting_for_button', 'N√ÉO EXISTE')}")
        
        print("DEBUG: N√£o precisa bot√£o, salvando etapa")
        # Salvar etapa automaticamente
        await save_current_step_and_continue(update, context, flow_manager)
        return
    else:
        print(f"DEBUG: N√ÉO ENTROU NA SE√á√ÉO waiting_for_image_text. waiting_for_image_text existe: {'waiting_for_image_text' in context.user_data}, valor: {context.user_data.get('waiting_for_image_text', 'N√ÉO EXISTE')}")
        print(f"DEBUG: Condi√ß√£o completa: {'waiting_for_image_text' in context.user_data} AND {context.user_data.get('waiting_for_image_text', False)}")
    
    # Verificar se est√° configurando texto do bot√£o (PRIORIDADE ALTA)
    print(f"DEBUG: VERIFICANDO SE√á√ÉO waiting_for_button_text - Condi√ß√£o: {'waiting_for_button_text' in context.user_data} AND {context.user_data.get('waiting_for_button_text', False)}")
    if 'waiting_for_button_text' in context.user_data and context.user_data['waiting_for_button_text']:
        print(f"DEBUG: ENTRANDO NA SE√á√ÉO CORRETA - Processando texto do bot√£o: {text}")
        
        # Se ainda n√£o tem o texto do bot√£o, salvar o texto e pedir o link
        if 'button_text' not in context.user_data:
            context.user_data['button_text'] = text
            print("DEBUG: Texto do bot√£o salvo, pedindo link")
            await update.message.reply_text(
                "üîó **Digite o link/URL do bot√£o:**\n\nExemplo: https://exemplo.com",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                ]])
            )
            context.user_data['waiting_for_button_url'] = True
            return
        else:
            # Se j√° tem o texto, agora √© o link
            button_url = text
            
            # Adicionar bot√£o √† etapa
            if 'buttons' not in context.user_data['current_step_data']:
                context.user_data['current_step_data']['buttons'] = []
            
            button_data = {
                'text': context.user_data['button_text'],
                'type': 'url',
                'data': button_url
            }
            context.user_data['current_step_data']['buttons'].append(button_data)
            
            print(f"DEBUG: Bot√£o adicionado. Total de bot√µes: {len(context.user_data['current_step_data']['buttons'])}")
            print(f"DEBUG: Bot√£o criado - Texto: {context.user_data['button_text']}, URL: {button_url}")
            
            # Limpar todos os estados de espera
            context.user_data.pop('waiting_for_button_text', None)
            context.user_data.pop('waiting_for_button', None)
            context.user_data.pop('waiting_for_image_text', None)
            context.user_data.pop('waiting_for_video_text', None)
            context.user_data.pop('button_text', None)
            context.user_data.pop('waiting_for_button_url', None)
            
            print("DEBUG: Estados limpos, salvando etapa...")
            
            # Salvar etapa automaticamente
            await save_current_step_and_continue(update, context, flow_manager)
            return
    else:
        print(f"DEBUG: N√ÉO ENTROU NA SE√á√ÉO waiting_for_button_text. waiting_for_button_text existe: {'waiting_for_button_text' in context.user_data}, valor: {context.user_data.get('waiting_for_button_text', 'N√ÉO EXISTE')}")
        print(f"DEBUG: Condi√ß√£o completa: {'waiting_for_button_text' in context.user_data} AND {context.user_data.get('waiting_for_button_text', False)}")
    
    # Verificar se est√° configurando URL do bot√£o
    if 'waiting_for_button_url' in context.user_data and context.user_data['waiting_for_button_url']:
        print(f"DEBUG: ENTRANDO NA SE√á√ÉO waiting_for_button_url - Processando URL do bot√£o: {text}")
        
        # Se j√° tem o texto, agora √© o link
        button_url = text
        
        # Adicionar bot√£o √† etapa
        if 'buttons' not in context.user_data['current_step_data']:
            context.user_data['current_step_data']['buttons'] = []
        
        button_data = {
            'text': context.user_data['button_text'],
            'type': 'url',
            'data': button_url
        }
        context.user_data['current_step_data']['buttons'].append(button_data)
        
        print(f"DEBUG: Bot√£o adicionado. Total de bot√µes: {len(context.user_data['current_step_data']['buttons'])}")
        print(f"DEBUG: Bot√£o criado - Texto: {context.user_data['button_text']}, URL: {button_url}")
        
        # Limpar todos os estados de espera
        context.user_data.pop('waiting_for_button_text', None)
        context.user_data.pop('waiting_for_button', None)
        context.user_data.pop('waiting_for_image_text', None)
        context.user_data.pop('waiting_for_video_text', None)
        context.user_data.pop('button_text', None)
        context.user_data.pop('waiting_for_button_url', None)
        
        print("DEBUG: Estados limpos, salvando etapa...")
        
        # Salvar etapa automaticamente
        await save_current_step_and_continue(update, context, flow_manager)
        return
    
    # Verificar se est√° configurando texto de v√≠deo
    if 'waiting_for_video_text' in context.user_data and context.user_data['waiting_for_video_text']:
        context.user_data['current_step_data']['content'] = text
        context.user_data.pop('waiting_for_video_text', None)
        
        # Salvar etapa automaticamente
        await save_current_step_and_continue(update, context, flow_manager)
        return
    
    # Verificar se est√° configurando texto de v√≠deo redondo
    if 'waiting_for_video_note_text' in context.user_data and context.user_data['waiting_for_video_note_text']:
        context.user_data['current_step_data']['content'] = text
        context.user_data.pop('waiting_for_video_note_text', None)
        
        # Salvar etapa automaticamente
        await save_current_step_and_continue(update, context, flow_manager)
        return
    
    # Verificar se est√° criando um fluxo
    print(f"DEBUG: Verificando se est√° criando fluxo - creating_flow: {context.user_data.get('creating_flow', False)}")
    if 'creating_flow' in context.user_data and context.user_data['creating_flow']:
        print("DEBUG: ENTRANDO NA SE√á√ÉO creating_flow")
        # Criar novo fluxo
        flow_id = flow_manager.create_flow(text)
        if flow_id:
            context.user_data['current_flow_id'] = flow_id
            context.user_data['creating_flow'] = False
            context.user_data['flow_data']['name'] = text
            
            await update.message.reply_text(
                f"‚úÖ **Fluxo '{text}' criado!**\n\nüìã **Mensagem 1**\n\nEscolha o tipo de mensagem:",
                reply_markup=create_message_step_keyboard(1)
            )
        else:
            await update.message.reply_text(
                "‚ùå Erro ao criar fluxo. Tente novamente.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                ]])
            )
        return
    
    # Verificar se est√° configurando etapa
    print(f"DEBUG: Verificando se est√° configurando etapa - current_step_type: {context.user_data.get('current_step_type', 'N√ÉO EXISTE')}")
    if 'current_step_type' in context.user_data:
        print("DEBUG: ENTRANDO NA SE√á√ÉO current_step_type")
        step_type = context.user_data['current_step_type']
        
        if 'current_step_data' not in context.user_data:
            context.user_data['current_step_data'] = {}
        
        if step_type == 'message_text':
            # Configurar mensagem de texto simples
            context.user_data['current_step_data']['content'] = text
            context.user_data['current_step_data']['type'] = 'text'
            
            # Salvar etapa automaticamente
            await save_current_step_and_continue(update, context, flow_manager)
            
        elif step_type == 'message_image':
            # Verificar se √© uma URL v√°lida
            if text.startswith(('http://', 'https://')):
                context.user_data['current_step_data']['media_url'] = text
                context.user_data['current_step_data']['type'] = 'image'
                
                await update.message.reply_text(
                    "üìù **Digite o texto da imagem:**",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                context.user_data['waiting_for_image_text'] = True
                return
            else:
                # Se n√£o √© URL, n√£o processar aqui - deixar para a se√ß√£o waiting_for_image_text
                await update.message.reply_text(
                    "‚ùå **URL inv√°lida!**\n\nDigite uma URL v√°lida (come√ßando com http:// ou https://) ou envie a imagem diretamente.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                return
            
        elif step_type == 'message_video':
            # Verificar se √© uma URL v√°lida
            if text.startswith(('http://', 'https://')):
                context.user_data['current_step_data']['media_url'] = text
                context.user_data['current_step_data']['type'] = 'video'
                
                await update.message.reply_text(
                    "üìù **Digite o texto do v√≠deo:**",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                context.user_data['waiting_for_video_text'] = True
                return
            else:
                # Se n√£o √© URL, tratar como texto do v√≠deo (quando j√° tem media_url)
                if 'current_step_data' in context.user_data and 'media_url' in context.user_data['current_step_data']:
                    context.user_data['current_step_data']['content'] = text
                    context.user_data.pop('waiting_for_video_text', None)
                    
                    # Salvar etapa automaticamente
                    await save_current_step_and_continue(update, context, flow_manager)
                    return
                else:
                    await update.message.reply_text(
                        "‚ùå **URL inv√°lida!**\n\nDigite uma URL v√°lida (come√ßando com http:// ou https://) ou envie o v√≠deo diretamente.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                        ]])
                    )
                    return
        
        elif step_type == 'message_video_note':
            # Verificar se √© uma URL v√°lida
            if text.startswith(('http://', 'https://')):
                context.user_data['current_step_data']['media_url'] = text
                context.user_data['current_step_data']['type'] = 'video_note'
                
                await update.message.reply_text(
                    "üìù **Digite o texto do v√≠deo redondo:**",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                context.user_data['waiting_for_video_note_text'] = True
                return
            else:
                # Se n√£o √© URL, tratar como texto do v√≠deo redondo (quando j√° tem media_url)
                if 'current_step_data' in context.user_data and 'media_url' in context.user_data['current_step_data']:
                    context.user_data['current_step_data']['content'] = text
                    context.user_data.pop('waiting_for_video_note_text', None)
                    
                    # Salvar etapa automaticamente
                    await save_current_step_and_continue(update, context, flow_manager)
                    return
                else:
                    await update.message.reply_text(
                        "‚ùå **URL inv√°lida!**\n\nDigite uma URL v√°lida (come√ßando com http:// ou https://) ou envie o v√≠deo redondo diretamente.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                        ]])
                    )
                    return
            
        elif step_type == 'message_image_button':
            # Verificar se √© uma URL v√°lida
            if text.startswith(('http://', 'https://')):
                context.user_data['current_step_data']['media_url'] = text
                context.user_data['current_step_data']['type'] = 'image'
                
                await update.message.reply_text(
                    "üìù **Digite o texto da imagem:**",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                context.user_data['waiting_for_image_text'] = True
                context.user_data['waiting_for_button'] = True
                return
            else:
                # Se n√£o √© URL, n√£o processar aqui - deixar para a se√ß√£o waiting_for_image_text
                await update.message.reply_text(
                    "‚ùå **URL inv√°lida!**\n\nDigite uma URL v√°lida (come√ßando com http:// ou https://) ou envie a imagem diretamente.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                return
        
        elif step_type == 'message_video_button':
            # Verificar se √© uma URL v√°lida
            if text.startswith(('http://', 'https://')):
                context.user_data['current_step_data']['media_url'] = text
                context.user_data['current_step_data']['type'] = 'video'
                
                await update.message.reply_text(
                    "üìù **Digite o texto do v√≠deo:**",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                context.user_data['waiting_for_video_text'] = True
                context.user_data['waiting_for_button'] = True
                return
            else:
                # Se n√£o √© URL, n√£o processar aqui - deixar para a se√ß√£o waiting_for_video_text
                await update.message.reply_text(
                    "‚ùå **URL inv√°lida!**\n\nDigite uma URL v√°lida (come√ßando com http:// ou https://) ou envie o v√≠deo diretamente.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                return
        
        elif step_type == 'message_video_note_button':
            # Verificar se √© uma URL v√°lida
            if text.startswith(('http://', 'https://')):
                context.user_data['current_step_data']['media_url'] = text
                context.user_data['current_step_data']['type'] = 'video_note'
                
                await update.message.reply_text(
                    "üìù **Digite o texto do v√≠deo redondo:**",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                context.user_data['waiting_for_video_note_text'] = True
                context.user_data['waiting_for_button'] = True
                return
            else:
                # Se n√£o √© URL, n√£o processar aqui - deixar para a se√ß√£o waiting_for_video_note_text
                await update.message.reply_text(
                    "‚ùå **URL inv√°lida!**\n\nDigite uma URL v√°lida (come√ßando com http:// ou https://) ou envie o v√≠deo redondo diretamente.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                    ]])
                )
                return
        
        elif step_type == 'message_text_button':
            # Para texto + bot√£o, o texto √© o conte√∫do da mensagem
            context.user_data['current_step_data']['content'] = text
            context.user_data['current_step_data']['type'] = 'text'
            
            await update.message.reply_text(
                "üîò **Digite o texto do bot√£o:**",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                ]])
            )
            context.user_data['waiting_for_button_text'] = True
            return
        
        # Salvar etapa automaticamente
        if 'current_flow_id' in context.user_data:
            flow_id = context.user_data['current_flow_id']
            step_id = flow_manager.save_flow_step(flow_id, context.user_data['current_step_data'])
            
            if step_id:
                # Limpar dados da etapa
                context.user_data.pop('current_step_data', None)
                context.user_data.pop('current_step_type', None)
                context.user_data.pop('waiting_for_image_text', None)
                context.user_data.pop('waiting_for_video_text', None)
                
                await update.message.reply_text(
                    "‚úÖ **Etapa salva automaticamente!**\n\nEscolha uma op√ß√£o:",
                    reply_markup=create_simple_flow_control_keyboard()
                )
            else:
                await update.message.reply_text(
                    "‚ùå Erro ao salvar etapa.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                    ]])
                )
        return
    
    # Se n√£o estiver em nenhum modo de cria√ß√£o, usar echo normal
    print("DEBUG: N√ÉO ENTROU EM NENHUMA SE√á√ÉO ESPEC√çFICA, USANDO ECHO")
    await echo(update, context)

async def save_current_step_and_continue(update, context, flow_manager):
    """Salva a etapa atual e mostra op√ß√µes para continuar"""
    print(f"üîç DEBUG: save_current_step_and_continue - current_flow_id existe: {'current_flow_id' in context.user_data}")
    print(f"üîç DEBUG: save_current_step_and_continue - current_step_data existe: {'current_step_data' in context.user_data}")
    print(f"üîç DEBUG: save_current_step_and_continue - current_flow_id: {context.user_data.get('current_flow_id', 'N√ÉO EXISTE')}")
    print(f"üîç DEBUG: save_current_step_and_continue - current_step_data: {context.user_data.get('current_step_data', 'N√ÉO EXISTE')}")
    print(f"üîç DEBUG: save_current_step_and_continue - editing_flow_id: {context.user_data.get('editing_flow_id', 'N√ÉO EXISTE')}")
    
    # Verificar se temos current_flow_id ou editing_flow_id
    flow_id = context.user_data.get('current_flow_id') or context.user_data.get('editing_flow_id')
    
    if flow_id and 'current_step_data' in context.user_data:
        step_data = context.user_data['current_step_data']
        
        print(f"üîç DEBUG: Salvando etapa - flow_id: {flow_id}, step_data: {step_data}")
        
        # Salvar etapa
        step_id = flow_manager.save_flow_step(flow_id, step_data)
        
        if step_id:
            # Limpar dados da etapa atual
            context.user_data.pop('current_step_data', None)
            context.user_data.pop('current_step_type', None)
            context.user_data.pop('waiting_for_image_text', None)
            context.user_data.pop('waiting_for_video_text', None)
            context.user_data.pop('waiting_for_video_note_text', None)
            context.user_data.pop('waiting_for_button', None)
            context.user_data.pop('waiting_for_button_text', None)
            
            # Incrementar n√∫mero da etapa
            current_step = context.user_data.get('current_step_number', 1)
            next_step = current_step + 1
            context.user_data['current_step_number'] = next_step
            
            await update.message.reply_text(
                f"‚úÖ **Mensagem {current_step} salva!**\n\nEscolha uma op√ß√£o:",
                reply_markup=create_simple_flow_control_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå Erro ao salvar etapa.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                ]])
            )
    else:
        print("DEBUG: ERRO - Dados da etapa n√£o encontrados")
        await update.message.reply_text(
            "‚ùå Dados da etapa n√£o encontrados.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
            ]])
        )

# Handlers para sistema de fluxo e admin
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /admin - Menu de administra√ß√£o"""
    user = update.effective_user
    flow_manager = FlowManager()
    
    if not flow_manager.is_admin(user.id):
        await update.message.reply_text("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
        return
    
    await update.message.reply_text(
        "üîß **Painel de Administra√ß√£o**\n\nEscolha uma op√ß√£o:",
        reply_markup=create_admin_keyboard()
    )

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler para callbacks dos bot√µes inline"""
    query = update.callback_query
    
    # DEBUG: Log do callback recebido
    print(f"üîç DEBUG: Callback recebido: {query.data}")
    print(f"üîç DEBUG: User ID: {update.effective_user.id}")
    print(f"üîç DEBUG: Message ID: {query.message.message_id if query.message else 'N/A'}")
    
    await query.answer()
    
    # DEBUG: Verificar se o callback come√ßa com edit_step_text_
    if query.data.startswith("edit_step_text_"):
        print(f"üîç DEBUG: Callback edit_step_text_ detectado: {query.data}")
    elif query.data.startswith("edit_step_media_"):
        print(f"üîç DEBUG: Callback edit_step_media_ detectado: {query.data}")
    else:
        print(f"üîç DEBUG: Callback n√£o √© de edi√ß√£o: {query.data}")
    
    # Fun√ß√£o auxiliar para editar mensagem com tratamento de erro
    async def safe_edit_message(text, reply_markup=None):
        print(f"üîç DEBUG: safe_edit_message chamada - Texto: {text[:50]}...")
        print(f"üîç DEBUG: Reply markup: {reply_markup}")
        try:
            await query.edit_message_text(text, reply_markup=reply_markup)
            print("üîç DEBUG: Mensagem editada com sucesso")
        except Exception as e:
            print(f"üîç DEBUG: Erro ao editar mensagem: {e}")
            if "Message is not modified" in str(e):
                # Ignorar erro de mensagem n√£o modificada
                print("üîç DEBUG: Ignorando erro 'Message is not modified'")
                pass
            else:
                # Re-raise outros erros
                print(f"üîç DEBUG: Re-raise do erro: {e}")
                raise e
    
    user = update.effective_user
    flow_manager = FlowManager()
    
    if query.data == "admin_menu":
        if flow_manager.is_admin(user.id):
            await safe_edit_message(
                "üîß **Painel de Administra√ß√£o**\n\nEscolha uma op√ß√£o:",
                reply_markup=create_admin_keyboard()
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "admin_flows":
        if flow_manager.is_admin(user.id):
            await safe_edit_message(
                "üìù **Gerenciamento de Fluxos**\n\nEscolha uma op√ß√£o:",
                reply_markup=create_flow_management_keyboard()
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "create_flow":
        if flow_manager.is_admin(user.id):
            context.user_data['creating_flow'] = True
            context.user_data['flow_data'] = {}
            context.user_data['current_step_number'] = 1
            await safe_edit_message(
                "üìù **Criar Novo Fluxo**\n\nDigite o nome do fluxo:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "add_message_text":
        if flow_manager.is_admin(user.id):
            context.user_data['current_step_type'] = 'message_text'
            await safe_edit_message(
                "üìù **Mensagem + Texto**\n\nDigite o texto da mensagem:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "add_message_image":
        if flow_manager.is_admin(user.id):
            context.user_data['current_step_type'] = 'message_image'
            await safe_edit_message(
                "üñºÔ∏è **Mensagem + Imagem**\n\nüì§ **Envie a imagem diretamente** ou digite a URL:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "add_message_video":
        if flow_manager.is_admin(user.id):
            context.user_data['current_step_type'] = 'message_video'
            await safe_edit_message(
                "üé• **Mensagem + V√≠deo**\n\nüì§ **Envie o v√≠deo diretamente** ou digite a URL:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "add_message_image_button":
        if flow_manager.is_admin(user.id):
            context.user_data['current_step_type'] = 'message_image_button'
            await safe_edit_message(
                "üñºÔ∏è **Mensagem + Imagem + Bot√£o**\n\nüì§ **Envie a imagem diretamente** ou digite a URL:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "add_message_text_button":
        if flow_manager.is_admin(user.id):
            context.user_data['current_step_type'] = 'message_text_button'
            await safe_edit_message(
                "üîò **Mensagem + Texto + Bot√£o**\n\nüìù **Digite o texto da mensagem:**",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "add_message_video_button":
        if flow_manager.is_admin(user.id):
            context.user_data['current_step_type'] = 'message_video_button'
            await safe_edit_message(
                "üé• **Mensagem + V√≠deo + Bot√£o**\n\nüì§ **Envie o v√≠deo diretamente** ou digite a URL:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "add_message_video_note":
        if flow_manager.is_admin(user.id):
            context.user_data['current_step_type'] = 'message_video_note'
            await safe_edit_message(
                "üé¨ **Mensagem + V√≠deo Redondo**\n\nüì§ **Envie o v√≠deo redondo diretamente** ou digite a URL:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "add_message_video_note_button":
        if flow_manager.is_admin(user.id):
            context.user_data['current_step_type'] = 'message_video_note_button'
            await safe_edit_message(
                "üé¨ **Mensagem + V√≠deo Redondo + Texto**\n\nüì§ **Envie o v√≠deo redondo diretamente** ou digite a URL:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "convert_video_note":
        if flow_manager.is_admin(user.id):
            if 'video_to_convert' in context.user_data:
                video_data = context.user_data['video_to_convert']['file_data']
                step_type = context.user_data['video_to_convert']['step_type']
                
                await safe_edit_message(
                    "üîÑ **Convertendo v√≠deo...**\n\n"
                    "Aguarde enquanto convertemos o v√≠deo para o formato correto.\n"
                    "Isso pode levar alguns segundos...",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚è≥ Processando...", callback_data="processing")
                    ]])
                )
                
                # Converter v√≠deo
                success, converted_data, message = await convert_video_to_video_note(video_data)
                
                if success:
                    # Salvar v√≠deo convertido
                    if 'current_step_data' not in context.user_data:
                        context.user_data['current_step_data'] = {}
                    
                    # Salvar como arquivo tempor√°rio
                    temp_filename = f"converted_{int(asyncio.get_event_loop().time())}.mp4"
                    temp_path = UPLOADS_DIR / "video_note" / temp_filename
                    temp_path.parent.mkdir(exist_ok=True)
                    
                    with open(temp_path, 'wb') as f:
                        f.write(converted_data)
                    
                    context.user_data['current_step_data']['media_url'] = str(temp_path)
                    context.user_data['current_step_data']['type'] = 'video_note'
                    context.user_data['current_step_data']['converted'] = True
                    
                    # Limpar dados de convers√£o
                    context.user_data.pop('video_to_convert', None)
                    
                    await safe_edit_message(
                        f"‚úÖ **Convers√£o Conclu√≠da!**\n\n{message}\n\n"
                        "üìù **Digite o texto do v√≠deo redondo:**",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Cancelar", callback_data="admin_flows")
                        ]])
                    )
                    
                    context.user_data['waiting_for_video_note_text'] = True
                    if step_type == 'message_video_note_button':
                        context.user_data['waiting_for_button'] = True
                else:
                    await safe_edit_message(
                        f"‚ùå **Erro na Convers√£o**\n\n{message}\n\n"
                        "Tente enviar um v√≠deo diferente ou verifique os requisitos.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                        ]])
                    )
            else:
                await safe_edit_message(
                    "‚ùå **Erro**\n\nDados do v√≠deo n√£o encontrados. Tente novamente.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "convert_welcome_video_note":
        if flow_manager.is_admin(user.id):
            if 'temp_welcome_video_data' in context.user_data:
                video_data = context.user_data['temp_welcome_video_data']['file_data']
                
                await safe_edit_message(
                    "üîÑ **Convertendo v√≠deo para boas-vindas...**\n\n"
                    "Aguarde enquanto convertemos o v√≠deo para o formato redondo.\n"
                    "Isso pode levar alguns segundos...",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚è≥ Processando...", callback_data="processing")
                    ]])
                )
                
                # Converter v√≠deo
                success, converted_data, message = await convert_video_to_video_note(video_data)
                
                if success:
                    # Salvar v√≠deo convertido
                    import os
                    from pathlib import Path
                    UPLOADS_DIR = Path("uploads")
                    video_note_dir = UPLOADS_DIR / "video_note"
                    video_note_dir.mkdir(parents=True, exist_ok=True)
                    
                    temp_filename = f"welcome_video_note_{int(asyncio.get_event_loop().time())}.mp4"
                    temp_path = video_note_dir / temp_filename
                    
                    with open(temp_path, 'wb') as f:
                        f.write(converted_data)
                    
                    # Salvar configura√ß√µes
                    if set_config_value('welcome_media_url', str(temp_path)) and set_config_value('welcome_media_type', 'video_note'):
                        context.user_data.pop('configuring_welcome_media', None)
                        context.user_data.pop('welcome_media_type', None)
                        context.user_data.pop('temp_welcome_video_data', None)
                        
                        await safe_edit_message(
                            f"‚úÖ **V√≠deo Redondo da Mensagem de Boas-vindas Configurado!**\n\n"
                            f"O v√≠deo foi convertido com sucesso para formato redondo.\n"
                            f"Arquivo: {temp_path}",
                            reply_markup=create_config_welcome_keyboard()
                        )
                    else:
                        await safe_edit_message(
                            "‚ùå **Erro ao salvar v√≠deo redondo.**\n\nTente novamente.",
                            reply_markup=create_config_welcome_keyboard()
                        )
                else:
                    await safe_edit_message(
                        f"‚ùå **Erro na Convers√£o**\n\n{message}\n\n"
                        "Tente enviar um v√≠deo diferente ou verifique os requisitos.",
                        reply_markup=create_config_welcome_keyboard()
                    )
            else:
                await safe_edit_message(
                    "‚ùå **Erro**\n\nDados do v√≠deo n√£o encontrados. Tente novamente.",
                    reply_markup=create_config_welcome_keyboard()
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "finish_step":
        if flow_manager.is_admin(user.id):
            # Salvar etapa atual no banco de dados
            if 'current_flow_id' in context.user_data and 'current_step_data' in context.user_data:
                flow_id = context.user_data['current_flow_id']
                step_data = context.user_data['current_step_data']
                
                # Salvar etapa usando a nova fun√ß√£o
                step_id = flow_manager.save_flow_step(flow_id, step_data)
                
                if step_id:
                    # Limpar dados da etapa atual
                    context.user_data.pop('current_step_data', None)
                    context.user_data.pop('current_step_type', None)
                    context.user_data.pop('media_option', None)
                    context.user_data.pop('current_button_type', None)
                    
                    await safe_edit_message(
                        "‚úÖ **Etapa Salva!**\n\nEtapa adicionada com sucesso ao fluxo.",
                        reply_markup=create_flow_control_keyboard()
                    )
                else:
                    await safe_edit_message(
                        "‚ùå Erro ao salvar etapa. Tente novamente.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                        ]])
                    )
            else:
                await safe_edit_message(
                    "‚ùå Dados da etapa n√£o encontrados.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "edit_flow":
        if flow_manager.is_admin(user.id):
            flows = flow_manager.get_active_flows()
            if flows:
                await safe_edit_message(
                    "‚úèÔ∏è **Editar Fluxo**\n\nEscolha o fluxo que deseja editar:",
                    reply_markup=create_edit_flow_keyboard(flows)
                )
            else:
                await safe_edit_message(
                    "üìù Nenhum fluxo encontrado para editar.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data.startswith("edit_flow_") and query.data != "edit_flow_list":
        if flow_manager.is_admin(user.id):
            flow_id = int(query.data.split("_")[2])
            
            # Obter informa√ß√µes do fluxo
            flows = flow_manager.get_active_flows()
            flow_name = "Fluxo Desconhecido"
            for flow in flows:
                if flow['id'] == flow_id:
                    flow_name = flow['name']
                    break
            
            # Salvar flow_id no contexto para edi√ß√£o
            context.user_data['editing_flow_id'] = flow_id
            
            await safe_edit_message(
                f"‚úèÔ∏è **Editar Fluxo: {flow_name}**\n\nEscolha a etapa que deseja editar:",
                reply_markup=create_edit_step_keyboard(flow_id)
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data.startswith("edit_step_") and not query.data.startswith("edit_step_text_") and not query.data.startswith("edit_step_media_"):
        print(f"üîç DEBUG: Entrando no handler edit_step_ gen√©rico - Callback: {query.data}")
        if flow_manager.is_admin(user.id):
            step_id = int(query.data.split("_")[-1])
            
            # Obter detalhes da etapa
            step = get_step_details(step_id)
            if step:
                # Salvar informa√ß√µes da etapa no contexto
                context.user_data['editing_step_id'] = step_id
                context.user_data['editing_step_type'] = step['step_type']
                context.user_data['editing_step_content'] = step['content']
                context.user_data['editing_step_media_url'] = step.get('media_url', '')
                
                # Criar mensagem de detalhes da etapa
                message = f"üìù **Editar Etapa**\n\n"
                message += f"**Fluxo:** {step['flow_name']}\n"
                message += f"**Tipo:** {step['step_type'].replace('_', ' ').title()}\n"
                message += f"**Conte√∫do:** {step['content'][:100]}{'...' if len(step['content']) > 100 else ''}\n"
                
                if step.get('media_url'):
                    message += f"**M√≠dia:** {step['media_url'][:50]}...\n"
                
                if step.get('buttons'):
                    message += f"**Bot√µes:** {len(step['buttons'])} bot√£o(√µes)\n"
                
                message += "\nEscolha o que deseja editar:"
                
                # Criar teclado de op√ß√µes de edi√ß√£o
                keyboard = [
                    [InlineKeyboardButton("üìù Editar Texto", callback_data=f"edit_step_text_{step_id}")],
                    [InlineKeyboardButton("üñºÔ∏è Editar M√≠dia", callback_data=f"edit_step_media_{step_id}")],
                    [InlineKeyboardButton("üóëÔ∏è Deletar Etapa", callback_data=f"delete_step_{step_id}")],
                    [InlineKeyboardButton("üîô Voltar", callback_data=f"edit_flow_{step['flow_id']}")]
                ]
                
                await safe_edit_message(
                    message,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await safe_edit_message(
                    "‚ùå Etapa n√£o encontrada.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="edit_flow_list")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data.startswith("edit_step_text_"):
        print(f"üîç DEBUG: Entrando no handler edit_step_text_ - Callback: {query.data}")
        if flow_manager.is_admin(user.id):
            step_id = int(query.data.split("_")[-1])
            print(f"üîç DEBUG: Step ID extra√≠do: {step_id}")
            
            context.user_data['editing_step_text'] = True
            context.user_data['editing_step_id'] = step_id
            
            print("üîç DEBUG: Tentando editar mensagem para edi√ß√£o de texto...")
            await safe_edit_message(
                "üìù **Editar Texto da Etapa**\n\nDigite o novo texto:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data=f"edit_step_{step_id}")
                ]])
            )
            print("üîç DEBUG: Mensagem editada com sucesso para edi√ß√£o de texto")
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data.startswith("edit_step_media_"):
        print(f"üîç DEBUG: Entrando no handler edit_step_media_ - Callback: {query.data}")
        if flow_manager.is_admin(user.id):
            step_id = int(query.data.split("_")[-1])
            print(f"üîç DEBUG: Step ID extra√≠do: {step_id}")
            
            context.user_data['editing_step_media'] = True
            context.user_data['editing_step_id'] = step_id
            
            print("üîç DEBUG: Tentando editar mensagem para edi√ß√£o de m√≠dia...")
            await safe_edit_message(
                "üñºÔ∏è **Editar M√≠dia da Etapa**\n\nEnvie a nova imagem/v√≠deo ou digite a URL:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data=f"edit_step_{step_id}")
                ]])
            )
            print("üîç DEBUG: Mensagem editada com sucesso para edi√ß√£o de m√≠dia")
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data.startswith("delete_step_"):
        if flow_manager.is_admin(user.id):
            step_id = int(query.data.split("_")[-1])
            
            # Obter detalhes da etapa antes de deletar
            step = get_step_details(step_id)
            if step:
                if delete_step_completely(step_id):
                    await safe_edit_message(
                        f"üóëÔ∏è **Etapa Deletada!**\n\nA etapa '{step['step_type'].replace('_', ' ').title()}' foi removida com sucesso.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data=f"edit_flow_{step['flow_id']}")
                        ]])
                    )
                else:
                    await safe_edit_message(
                        "‚ùå Erro ao deletar etapa.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data=f"edit_step_{step_id}")
                        ]])
                    )
            else:
                await safe_edit_message(
                    "‚ùå Etapa n√£o encontrada.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="edit_flow_list")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data.startswith("add_step_"):
        print(f"üîç DEBUG: Entrando no handler add_step_ - Callback: {query.data}")
        if flow_manager.is_admin(user.id):
            flow_id = int(query.data.split("_")[-1])
            print(f"üîç DEBUG: Flow ID extra√≠do: {flow_id}")
            
            # Salvar flow_id no contexto para adi√ß√£o de etapa
            context.user_data['current_flow_id'] = flow_id  # Corrigido: usar current_flow_id
            context.user_data['editing_flow_id'] = flow_id
            context.user_data['current_step_number'] = 1
            
            print(f"üîç DEBUG: current_flow_id definido como: {flow_id}")
            
            await safe_edit_message(
                "üìù **Adicionar Etapa**\n\nEscolha o tipo de etapa:",
                reply_markup=create_message_step_keyboard(1)
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "edit_flow_list":
        if flow_manager.is_admin(user.id):
            flows = flow_manager.get_active_flows()
            if flows:
                await safe_edit_message(
                    "‚úèÔ∏è **Editar Fluxo**\n\nEscolha o fluxo que deseja editar:",
                    reply_markup=create_edit_flow_keyboard(flows)
                )
            else:
                await safe_edit_message(
                    "üìù Nenhum fluxo encontrado para editar.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "continue_flow":
        if flow_manager.is_admin(user.id):
            # Continuar adicionando etapas
            current_step = context.user_data.get('current_step_number', 1)
            await safe_edit_message(
                f"üìã **Mensagem {current_step}**\n\nEscolha o tipo de mensagem:",
                reply_markup=create_message_step_keyboard(current_step)
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "confirm_step":
        if flow_manager.is_admin(user.id):
            # Confirmar etapa atual (salvar no banco)
            if 'current_flow_id' in context.user_data and 'current_step_data' in context.user_data:
                flow_id = context.user_data['current_flow_id']
                step_data = context.user_data['current_step_data']
                
                # Salvar etapa
                step_id = flow_manager.save_flow_step(flow_id, step_data)
                
                if step_id:
                    # Limpar dados da etapa atual
                    context.user_data.pop('current_step_data', None)
                    context.user_data.pop('current_step_type', None)
                    context.user_data.pop('media_option', None)
                    context.user_data.pop('current_button_type', None)
                    
                    await safe_edit_message(
                        "‚úÖ **Etapa Confirmada!**\n\nEtapa salva com sucesso.",
                        reply_markup=create_flow_control_keyboard()
                    )
                else:
                    await safe_edit_message(
                        "‚ùå Erro ao confirmar etapa.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                        ]])
                    )
            else:
                await safe_edit_message(
                    "‚ùå Dados da etapa n√£o encontrados.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "preview_step":
        if flow_manager.is_admin(user.id):
            # Mostrar preview da etapa atual
            if 'current_step_data' in context.user_data:
                step_data = context.user_data['current_step_data']
                
                preview_text = f"ÔøΩÔøΩ **Preview da Etapa**\n\n"
                preview_text += f"**Tipo:** {step_data.get('type', 'text').upper()}\n"
                preview_text += f"**Conte√∫do:** {step_data.get('content', '')[:100]}...\n"
                
                if step_data.get('media_url'):
                    preview_text += f"**M√≠dia:** {step_data.get('media_url')}\n"
                
                buttons = step_data.get('buttons', [])
                if buttons:
                    preview_text += f"**Bot√µes:** {len(buttons)} bot√£o(√µes)\n"
                    for i, button in enumerate(buttons, 1):
                        preview_text += f"  {i}. {button.get('text', '')}\n"
                
                await safe_edit_message(
                    preview_text,
                    reply_markup=create_step_preview_keyboard()
                )
            else:
                await safe_edit_message(
                    "‚ùå Nenhuma etapa para preview.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="step_type_selection")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "finish_flow":
        if flow_manager.is_admin(user.id):
            # Finalizar fluxo
            if 'current_flow_id' in context.user_data:
                flow_id = context.user_data['current_flow_id']
                
                try:
                    # Reordenar etapas
                    if flow_manager.reorder_steps(flow_id):
                        print(f"Etapas reordenadas com sucesso para o fluxo {flow_id}")
                    else:
                        print(f"Aviso: N√£o foi poss√≠vel reordenar etapas do fluxo {flow_id}")
                    
                    # Obter resumo do fluxo
                    summary = flow_manager.get_flow_summary(flow_id)
                except Exception as e:
                    print(f"Erro ao finalizar fluxo: {e}")
                    await safe_edit_message(
                        "‚ùå Erro ao finalizar fluxo. Tente novamente.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                        ]])
                    )
                    return
                
                if summary:
                    flow = summary['flow']
                    steps = summary['steps']
                    
                    finish_text = f"üéâ **Fluxo Finalizado com Sucesso!**\n\n"
                    finish_text += f"**Nome:** {flow['name']}\n"
                    finish_text += f"**Descri√ß√£o:** {flow['description']}\n"
                    finish_text += f"**Total de Etapas:** {summary['total_steps']}\n\n"
                    
                    if steps:
                        finish_text += "**Ordem de Envio:**\n"
                        for i, step in enumerate(steps, 1):
                            finish_text += f"{i}. {step['step_type'].upper()}"
                            if step['button_count'] > 0:
                                finish_text += f" ({step['button_count']} bot√µes)"
                            finish_text += "\n"
                    
                    finish_text += "\n‚úÖ O fluxo foi salvo e est√° pronto para uso!"
                else:
                    finish_text = "üéâ **Fluxo Finalizado!**\n\nO fluxo foi salvo com sucesso."
                
                # Limpar dados tempor√°rios
                context.user_data.clear()
                
                await safe_edit_message(
                    finish_text,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìã Ver Fluxos", callback_data="list_flows")],
                        [InlineKeyboardButton("‚ûï Criar Novo Fluxo", callback_data="create_flow")],
                        [InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")]
                    ])
                )
            else:
                await safe_edit_message(
                    "‚ùå Dados do fluxo n√£o encontrados.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "list_flows":
        if flow_manager.is_admin(user.id):
            flows = flow_manager.get_active_flows()
            if flows:
                flow_list = "üìã **Fluxos Ativos:**\n\n"
                for flow in flows:
                    flow_list += f"‚Ä¢ **{flow['name']}** (ID: {flow['id']})\n"
                    if flow['description']:
                        flow_list += f"  _{flow['description']}_\n"
                    flow_list += "\n"
                
                await safe_edit_message(
                    flow_list,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                    ]])
                )
            else:
                await safe_edit_message(
                    "üìù Nenhum fluxo encontrado.\n\nCrie um novo fluxo para come√ßar!",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "delete_flow":
        if flow_manager.is_admin(user.id):
            flows = flow_manager.get_active_flows()
            if flows:
                await safe_edit_message(
                    "üóëÔ∏è **Deletar Fluxo**\n\nEscolha o fluxo que deseja deletar:",
                    reply_markup=create_delete_flow_keyboard(flows)
                )
            else:
                await safe_edit_message(
                    "üìù Nenhum fluxo encontrado para deletar.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data.startswith("delete_flow_"):
        if flow_manager.is_admin(user.id):
            flow_id = int(query.data.split("_")[2])
            
            # Obter informa√ß√µes do fluxo antes de deletar
            flows = flow_manager.get_active_flows()
            flow_name = "Fluxo Desconhecido"
            for flow in flows:
                if flow['id'] == flow_id:
                    flow_name = flow['name']
                    break
            
            # Deletar o fluxo
            if flow_manager.delete_flow(flow_id):
                await safe_edit_message(
                    f"‚úÖ **Fluxo Deletado!**\n\nüóëÔ∏è **{flow_name}** foi deletado com sucesso.\n\nTodas as etapas e bot√µes associados tamb√©m foram removidos.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                    ]])
                )
            else:
                await safe_edit_message(
                    f"‚ùå **Erro ao Deletar Fluxo**\n\nN√£o foi poss√≠vel deletar o fluxo **{flow_name}**.\n\nVerifique se o fluxo existe e tente novamente.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_flows")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "set_default_flow":
        if flow_manager.is_admin(user.id):
            flows = flow_manager.get_flows_for_default_selection()
            if flows:
                default_flow = flow_manager.get_default_flow()
                current_default = f"‚≠ê **Fluxo Padr√£o Atual:** {default_flow['name']}" if default_flow else "‚ùå **Nenhum fluxo padr√£o definido**"
                
                message = f"‚≠ê **Definir Fluxo Padr√£o**\n\n{current_default}\n\nEscolha um fluxo para definir como padr√£o:"
                
                await safe_edit_message(
                    message,
                    reply_markup=create_default_flow_keyboard(flows)
                )
            else:
                await safe_edit_message(
                    "üìù Nenhum fluxo encontrado.\n\nCrie um novo fluxo primeiro!",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_menu")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data.startswith("set_default_"):
        if flow_manager.is_admin(user.id):
            flow_id = int(query.data.split("_")[2])
            
            if flow_manager.set_default_flow(flow_id):
                # Obter nome do fluxo
                flows = flow_manager.get_active_flows()
                flow_name = "Fluxo Desconhecido"
                for flow in flows:
                    if flow['id'] == flow_id:
                        flow_name = flow['name']
                        break
                
                await safe_edit_message(
                    f"‚úÖ **Fluxo Padr√£o Definido!**\n\n‚≠ê **{flow_name}** agora √© o fluxo padr√£o.\n\nEste fluxo ser√° executado quando usu√°rios enviarem /start.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_menu")
                    ]])
                )
            else:
                await safe_edit_message(
                    "‚ùå Erro ao definir fluxo padr√£o. Tente novamente.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_menu")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    

    
    elif query.data == "back_to_main":
        await safe_edit_message(
            "üëã **Bot Influenciador**\n\nEscolha uma op√ß√£o:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üöÄ Iniciar", callback_data="start_flow")],
                [InlineKeyboardButton("üìã Menu", callback_data="main_menu")],
                [InlineKeyboardButton("‚ùì Ajuda", callback_data="help_menu")]
            ])
        )
    
    elif query.data == "admin_config":
        if flow_manager.is_admin(user.id):
            await safe_edit_message(
                "‚öôÔ∏è **Configura√ß√µes do Bot**\n\nEscolha uma configura√ß√£o para gerenciar:",
                reply_markup=create_config_keyboard()
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "admin_stats":
        if flow_manager.is_admin(user.id):
            await safe_edit_message(
                "üìä **Estat√≠sticas e Relat√≥rios**\n\nEscolha o tipo de relat√≥rio:",
                reply_markup=create_stats_keyboard()
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "reset_welcome_video":
        if flow_manager.is_admin(user.id):
            # Resetar controle de v√≠deo de boas-vindas para todos os usu√°rios
            from flow_manager import reset_welcome_video_sent
            
            connection = create_connection()
            if connection is None:
                await safe_edit_message("‚ùå Erro ao conectar ao banco de dados.")
                return
            
            try:
                cursor = connection.cursor()
                
                # Resetar para todos os usu√°rios
                cursor.execute("UPDATE users SET welcome_video_sent = FALSE")
                connection.commit()
                
                affected_rows = cursor.rowcount
                await safe_edit_message(
                    f"‚úÖ **Controle de V√≠deo Redondo Resetado!**\n\n"
                    f"Resetado para {affected_rows} usu√°rios.\n\n"
                    f"Agora todos os usu√°rios receber√£o o v√≠deo redondo novamente na pr√≥xima vez que precisarem de cadastro.",
                    reply_markup=create_admin_keyboard()
                )
                
            except Error as e:
                await safe_edit_message(f"‚ùå Erro ao resetar: {e}")
            finally:
                if connection.is_connected():
                    cursor.close()
                    connection.close()
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "stats_general":
        if flow_manager.is_admin(user.id):
            stats = get_general_stats()
            if stats:
                message = "üìà **Estat√≠sticas Gerais**\n\n"
                message += f"üë• **Usu√°rios:** {stats['total_users']}\n"
                message += f"‚úÖ **Com dados completos:** {stats['users_with_data']}\n"
                message += f"üìù **Fluxos:** {stats['total_flows']}\n"
                message += f"üìã **Etapas:** {stats['total_steps']}\n"
                message += f"üîò **Bot√µes:** {stats['total_buttons']}\n\n"
                
                if stats['users_by_month']:
                    message += "üìÖ **Usu√°rios por m√™s (√∫ltimos 6 meses):**\n"
                    for month, count in stats['users_by_month']:
                        message += f"  ‚Ä¢ {month}: {count} usu√°rios\n"
                
                await safe_edit_message(
                    message,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_stats")
                    ]])
                )
            else:
                await safe_edit_message(
                    "‚ùå Erro ao obter estat√≠sticas.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_stats")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "stats_full_report":
        if flow_manager.is_admin(user.id):
            await safe_edit_message(
                "üìä **Gerando Relat√≥rio Completo...**\n\nAguarde um momento...",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚è≥ Processando...", callback_data="processing")
                ]])
            )
            
            filename = generate_excel_report("full")
            if filename:
                with open(filename, 'rb') as file:
                    await safe_edit_message(
                        "üìä **Relat√≥rio Completo Gerado!**\n\nO arquivo Excel foi criado com sucesso.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data="admin_stats")
                        ]])
                    )
                    await context.bot.send_document(
                        chat_id=query.from_user.id,
                        document=file,
                        filename=filename,
                        caption="üìä **Relat√≥rio Completo do Sistema**\n\nArquivo Excel com todas as estat√≠sticas e dados."
                    )
                    # Remover arquivo ap√≥s envio
                    import os
                    os.remove(filename)
            else:
                await safe_edit_message(
                    "‚ùå Erro ao gerar relat√≥rio completo.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_stats")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "stats_users_report":
        if flow_manager.is_admin(user.id):
            await safe_edit_message(
                "üë• **Gerando Relat√≥rio de Usu√°rios...**\n\nAguarde um momento...",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚è≥ Processando...", callback_data="processing")
                ]])
            )
            
            filename = generate_excel_report("users")
            if filename:
                with open(filename, 'rb') as file:
                    await safe_edit_message(
                        "üë• **Relat√≥rio de Usu√°rios Gerado!**\n\nO arquivo Excel foi criado com sucesso.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data="admin_stats")
                        ]])
                    )
                    await context.bot.send_document(
                        chat_id=query.from_user.id,
                        document=file,
                        filename=filename,
                        caption="üë• **Relat√≥rio de Usu√°rios**\n\nLista completa de todos os usu√°rios registrados."
                    )
                    # Remover arquivo ap√≥s envio
                    import os
                    os.remove(filename)
            else:
                await safe_edit_message(
                    "‚ùå Erro ao gerar relat√≥rio de usu√°rios.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_stats")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "stats_flows_report":
        if flow_manager.is_admin(user.id):
            await safe_edit_message(
                "üìù **Gerando Relat√≥rio de Fluxos...**\n\nAguarde um momento...",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚è≥ Processando...", callback_data="processing")
                ]])
            )
            
            filename = generate_excel_report("flows")
            if filename:
                with open(filename, 'rb') as file:
                    await safe_edit_message(
                        "üìù **Relat√≥rio de Fluxos Gerado!**\n\nO arquivo Excel foi criado com sucesso.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Voltar", callback_data="admin_stats")
                        ]])
                    )
                    await context.bot.send_document(
                        chat_id=query.from_user.id,
                        document=file,
                        filename=filename,
                        caption="üìù **Relat√≥rio de Fluxos**\n\nLista completa de todos os fluxos criados."
                    )
                    # Remover arquivo ap√≥s envio
                    import os
                    os.remove(filename)
            else:
                await safe_edit_message(
                    "‚ùå Erro ao gerar relat√≥rio de fluxos.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_stats")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_phone":
        if flow_manager.is_admin(user.id):
            status = "‚úÖ Ativada" if is_phone_collection_enabled() else "‚ùå Desativada"
            await safe_edit_message(
                f"üì± **Coleta de N√∫mero**\n\nStatus atual: {status}\n\nEscolha uma op√ß√£o:",
                reply_markup=create_config_phone_keyboard()
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_phone_enable":
        if flow_manager.is_admin(user.id):
            if set_config_value('collect_phone', 'true'):
                await safe_edit_message(
                    "‚úÖ **Coleta de N√∫mero Ativada!**\n\nAgora o bot ir√° solicitar o n√∫mero de telefone dos usu√°rios antes de exibir o fluxo.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_config")
                    ]])
                )
            else:
                await safe_edit_message(
                    "‚ùå Erro ao ativar coleta de n√∫mero.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_config")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_phone_disable":
        if flow_manager.is_admin(user.id):
            if set_config_value('collect_phone', 'false'):
                await safe_edit_message(
                    "‚ùå **Coleta de N√∫mero Desativada!**\n\nO bot n√£o ir√° mais solicitar o n√∫mero de telefone dos usu√°rios.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_config")
                    ]])
                )
            else:
                await safe_edit_message(
                    "‚ùå Erro ao desativar coleta de n√∫mero.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_config")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_email":
        if flow_manager.is_admin(user.id):
            status = "‚úÖ Ativada" if is_email_collection_enabled() else "‚ùå Desativada"
            await safe_edit_message(
                f"üìß **Coleta de Email**\n\nStatus atual: {status}\n\nEscolha uma op√ß√£o:",
                reply_markup=create_config_email_keyboard()
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_email_enable":
        if flow_manager.is_admin(user.id):
            if set_config_value('collect_email', 'true'):
                await safe_edit_message(
                    "‚úÖ **Coleta de Email Ativada!**\n\nAgora o bot ir√° solicitar o email dos usu√°rios antes de exibir o fluxo.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_config")
                    ]])
                )
            else:
                await safe_edit_message(
                    "‚ùå Erro ao ativar coleta de email.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_config")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_email_disable":
        if flow_manager.is_admin(user.id):
            if set_config_value('collect_email', 'false'):
                await safe_edit_message(
                    "‚ùå **Coleta de Email Desativada!**\n\nO bot n√£o ir√° mais solicitar o email dos usu√°rios.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_config")
                    ]])
                )
            else:
                await safe_edit_message(
                    "‚ùå Erro ao desativar coleta de email.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_config")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_require_signup":
        if flow_manager.is_admin(user.id):
            status = "‚úÖ Ativado" if is_signup_required() else "‚ùå Desativado"
            await safe_edit_message(
                f"üë§ **Exigir Cadastro**\n\nStatus atual: {status}\n\nEscolha uma op√ß√£o:",
                reply_markup=create_config_signup_keyboard()
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_webhook":
        if flow_manager.is_admin(user.id):
            webhook_enabled = is_webhook_enabled()
            webhook_url = get_webhook_url()
            
            status = "‚úÖ Ativado" if webhook_enabled else "‚ùå Desativado"
            url_status = f"üîó {webhook_url}" if webhook_url else "‚ùå N√£o definida"
            
            message = f"üîó **Webhook CRM**\n\n"
            message += f"Status: {status}\n"
            message += f"URL: {url_status}\n\n"
            message += "**Eventos ativos:**\n"
            message += "‚Ä¢ Acesso ao bot\n"
            message += "‚Ä¢ Cadastro conclu√≠do\n\n"
            message += "Escolha uma op√ß√£o:"
            
            await safe_edit_message(
                message,
                reply_markup=create_webhook_keyboard()
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "webhook_enable":
        if flow_manager.is_admin(user.id):
            if set_config_value('webhook_enabled', 'true'):
                await safe_edit_message(
                    "‚úÖ **Webhook CRM Ativado!**\n\nAgora voc√™ precisa definir a URL do webhook.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîó Definir URL", callback_data="webhook_set_url")],
                        [InlineKeyboardButton("üîô Voltar", callback_data="config_webhook")]
                    ])
                )
            else:
                await safe_edit_message(
                    "‚ùå Erro ao ativar webhook.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="config_webhook")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "webhook_disable":
        if flow_manager.is_admin(user.id):
            if set_config_value('webhook_enabled', 'false'):
                await safe_edit_message(
                    "‚ùå **Webhook CRM Desativado!**\n\nO webhook n√£o ser√° mais enviado.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="config_webhook")
                    ]])
                )
            else:
                await safe_edit_message(
                    "‚ùå Erro ao desativar webhook.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="config_webhook")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "webhook_set_url":
        if flow_manager.is_admin(user.id):
            context.user_data['setting_webhook_url'] = True
            await safe_edit_message(
                "üîó **Definir URL do Webhook**\n\nDigite a URL do seu CRM:\n\nExemplo: https://seu-crm.com/webhook",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="config_webhook")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "webhook_change_url":
        if flow_manager.is_admin(user.id):
            context.user_data['changing_webhook_url'] = True
            current_url = get_webhook_url()
            await safe_edit_message(
                f"‚úèÔ∏è **Alterar URL do Webhook**\n\nURL atual: {current_url}\n\nDigite a nova URL:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="config_webhook")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_signup_enable":
        if flow_manager.is_admin(user.id):
            if set_config_value('require_signup', 'true'):
                await safe_edit_message(
                    "‚úÖ **Exigir Cadastro Ativado!**\n\nAgora o bot ir√° solicitar o cadastro completo dos usu√°rios antes de exibir o fluxo.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_config")
                    ]])
                )
            else:
                await safe_edit_message(
                    "‚ùå Erro ao ativar exigir cadastro.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_config")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_signup_disable":
        if flow_manager.is_admin(user.id):
            if set_config_value('require_signup', 'false'):
                await safe_edit_message(
                    "‚ùå **Exigir Cadastro Desativado!**\n\nO bot n√£o ir√° mais exigir cadastro dos usu√°rios.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_config")
                    ]])
                )
            else:
                await safe_edit_message(
                    "‚ùå Erro ao desativar exigir cadastro.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Voltar", callback_data="admin_config")
                    ]])
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_welcome":
        if flow_manager.is_admin(user.id):
            welcome_enabled = is_welcome_enabled()
            welcome_data = get_welcome_message()
            
            status_text = "‚úÖ **Ativada**" if welcome_enabled else "‚ùå **Desativada**"
            media_text = f"üñºÔ∏è **M√≠dia:** {welcome_data['media_type']}" if welcome_data['media_url'] else "üñºÔ∏è **M√≠dia:** Nenhuma"
            text_preview = welcome_data['text'][:50] + "..." if len(welcome_data['text']) > 50 else welcome_data['text']
            text_display = f"üìù **Texto:** {text_preview}" if welcome_data['text'] else "üìù **Texto:** Nenhum"
            
            await safe_edit_message(
                f"üé¨ **Configura√ß√£o de Mensagem de Boas-vindas**\n\n"
                f"**Status:** {status_text}\n"
                f"{text_display}\n"
                f"{media_text}\n\n"
                f"Configure uma mensagem que ser√° enviada antes do cadastro do usu√°rio.",
                reply_markup=create_config_welcome_keyboard()
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_welcome_enable":
        if flow_manager.is_admin(user.id):
            if set_config_value('welcome_enabled', 'true'):
                await safe_edit_message(
                    "‚úÖ **Mensagem de Boas-vindas Ativada!**\n\nA mensagem ser√° enviada antes do cadastro do usu√°rio.",
                    reply_markup=create_config_welcome_keyboard()
                )
            else:
                await safe_edit_message(
                    "‚ùå Erro ao ativar mensagem de boas-vindas.",
                    reply_markup=create_config_welcome_keyboard()
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_welcome_disable":
        if flow_manager.is_admin(user.id):
            if set_config_value('welcome_enabled', 'false'):
                await safe_edit_message(
                    "‚ùå **Mensagem de Boas-vindas Desativada!**\n\nA mensagem n√£o ser√° mais enviada.",
                    reply_markup=create_config_welcome_keyboard()
                )
            else:
                await safe_edit_message(
                    "‚ùå Erro ao desativar mensagem de boas-vindas.",
                    reply_markup=create_config_welcome_keyboard()
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_welcome_text":
        if flow_manager.is_admin(user.id):
            context.user_data['configuring_welcome_text'] = True
            current_text = get_config_value('welcome_text', '')
            await safe_edit_message(
                f"üìù **Editar Texto da Mensagem de Boas-vindas**\n\n"
                f"Texto atual:\n{current_text}\n\n"
                f"Digite o novo texto da mensagem de boas-vindas:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="config_welcome")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_welcome_photo":
        if flow_manager.is_admin(user.id):
            context.user_data['configuring_welcome_media'] = True
            context.user_data['welcome_media_type'] = 'photo'
            current_media = get_config_value('welcome_media_url', '')
            current_type = get_config_value('welcome_media_type', '')
            
            media_info = f"Tipo: {current_type}\nArquivo: {current_media}" if current_media else "Nenhuma foto configurada"
            
            await safe_edit_message(
                f"üñºÔ∏è **Definir Foto da Mensagem de Boas-vindas**\n\n"
                f"Configura√ß√£o atual:\n{media_info}\n\n"
                f"Envie uma foto para usar na mensagem de boas-vindas:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="config_welcome")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_welcome_video":
        if flow_manager.is_admin(user.id):
            context.user_data['configuring_welcome_media'] = True
            context.user_data['welcome_media_type'] = 'video'
            current_media = get_config_value('welcome_media_url', '')
            current_type = get_config_value('welcome_media_type', '')
            
            media_info = f"Tipo: {current_type}\nArquivo: {current_media}" if current_media else "Nenhum v√≠deo configurado"
            
            await safe_edit_message(
                f"üé¨ **Definir V√≠deo da Mensagem de Boas-vindas**\n\n"
                f"Configura√ß√£o atual:\n{media_info}\n\n"
                f"Envie um v√≠deo para usar na mensagem de boas-vindas:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="config_welcome")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_welcome_video_note":
        if flow_manager.is_admin(user.id):
            context.user_data['configuring_welcome_media'] = True
            context.user_data['welcome_media_type'] = 'video_note'
            current_media = get_config_value('welcome_media_url', '')
            current_type = get_config_value('welcome_media_type', '')
            
            media_info = f"Tipo: {current_type}\nArquivo: {current_media}" if current_media else "Nenhum v√≠deo redondo configurado"
            
            await safe_edit_message(
                f"‚≠ï **Definir V√≠deo Redondo da Mensagem de Boas-vindas**\n\n"
                f"Configura√ß√£o atual:\n{media_info}\n\n"
                f"Envie um v√≠deo redondo (video note) para usar na mensagem de boas-vindas.\n\n"
                f"üí° **Dica**: Voc√™ pode enviar um v√≠deo normal e ele ser√° convertido automaticamente para formato redondo.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Cancelar", callback_data="config_welcome")
                ]])
            )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_welcome_remove_media":
        if flow_manager.is_admin(user.id):
            if set_config_value('welcome_media_url', '') and set_config_value('welcome_media_type', ''):
                await safe_edit_message(
                    "üóëÔ∏è **M√≠dia Removida!**\n\nA mensagem de boas-vindas agora ser√° apenas texto.",
                    reply_markup=create_config_welcome_keyboard()
                )
            else:
                await safe_edit_message(
                    "‚ùå Erro ao remover m√≠dia.",
                    reply_markup=create_config_welcome_keyboard()
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "config_welcome_preview":
        if flow_manager.is_admin(user.id):
            welcome_data = get_welcome_message()
            
            if not welcome_data['text'] and not welcome_data['media_url']:
                await safe_edit_message(
                    "‚ö†Ô∏è **Nenhuma Mensagem Configurada**\n\nConfigure um texto ou m√≠dia primeiro.",
                    reply_markup=create_config_welcome_keyboard()
                )
                return
            
            try:
                # Simular envio da mensagem de boas-vindas
                await send_welcome_message(update, context)
                
                await safe_edit_message(
                    "üëÅÔ∏è **Visualiza√ß√£o Enviada!**\n\nA mensagem de boas-vindas foi enviada acima para visualiza√ß√£o.",
                    reply_markup=create_config_welcome_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    f"‚ùå **Erro na Visualiza√ß√£o**\n\nErro: {str(e)}",
                    reply_markup=create_config_welcome_keyboard()
                )
        else:
            await safe_edit_message("‚ùå Voc√™ n√£o tem permiss√£o de administrador.")
    
    elif query.data == "share_phone":
        # Solicitar compartilhamento de telefone via teclado personalizado
        keyboard = [
            [KeyboardButton("üì± Compartilhar Telefone", request_contact=True)],
            [KeyboardButton("üîô Voltar")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await query.message.reply_text(
            "üì± **Compartilhe seu n√∫mero de telefone:**\n\nToque no bot√£o abaixo para compartilhar automaticamente.",
            reply_markup=reply_markup
        )
        context.user_data['waiting_for_contact'] = True
    
    elif query.data == "share_email":
        # Solicitar email via teclado personalizado
        keyboard = [
            [KeyboardButton("üìß Digitar Email")],
            [KeyboardButton("üì± Compartilhar Telefone", request_contact=True)],
            [KeyboardButton("üîô Voltar")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await query.message.reply_text(
            "üìß **Digite seu email ou compartilhe seu telefone:**\n\nVoc√™ pode digitar o email ou compartilhar o telefone para continuar.",
            reply_markup=reply_markup
        )
        context.user_data['waiting_for_email_or_contact'] = True
    
    elif query.data == "type_name":
        # Solicitar digita√ß√£o do nome via teclado personalizado
        keyboard = [
            [KeyboardButton("üîô Voltar")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        
        await query.message.reply_text(
            "üë§ **Digite seu nome completo:**",
            reply_markup=reply_markup
        )
        context.user_data['waiting_for_name'] = True
    
    elif query.data == "back_to_data_collection":
        # Voltar para a tela inicial de coleta de dados
        if 'missing_data' in context.user_data:
            missing_data = context.user_data['missing_data']
            await request_missing_data(update, context, missing_data)
        else:
            await update.effective_message.reply_text("‚ùå Erro na coleta de dados.")
    

    
    elif query.data == "start_data_collection":
        # Iniciar coleta de dados (mantido para compatibilidade)
        if 'missing_data' in context.user_data and 'current_data_index' in context.user_data:
            missing_data = context.user_data['missing_data']
            current_index = context.user_data['current_data_index']
            
            if current_index < len(missing_data):
                data_type = missing_data[current_index]
                
                if data_type == "nome":
                    await safe_edit_message(
                        "üë§ **Digite seu nome completo:**",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Cancelar", callback_data="cancel_data_collection")
                        ]])
                    )
                    context.user_data['waiting_for_name'] = True
                elif data_type == "telefone":
                    await safe_edit_message(
                        "üì± **Digite seu n√∫mero de telefone:**\n\nFormato: (11) 99999-9999",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Cancelar", callback_data="cancel_data_collection")
                        ]])
                    )
                    context.user_data['waiting_for_phone'] = True
                elif data_type == "email":
                    await safe_edit_message(
                        "üìß **Digite seu email:**\n\nExemplo: usuario@exemplo.com",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô Cancelar", callback_data="cancel_data_collection")
                        ]])
                    )
                    context.user_data['waiting_for_email'] = True
            else:
                # Todos os dados foram coletados
                await finish_data_collection(query, context)
        else:
            await query.message.reply_text("‚ùå Erro na coleta de dados.")
    
    elif query.data == "cancel_data_collection":
        # Cancelar coleta de dados
        context.user_data.clear()
        await query.message.reply_text(
            "‚ùå **Coleta de Dados Cancelada**\n\nVoc√™ pode tentar novamente enviando /start",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ Tentar Novamente", callback_data="restart_data_collection")
            ]])
        )
    
    elif query.data == "restart_data_collection":
        # Reiniciar coleta de dados
        user = update.effective_user
        
        # Verificar configura√ß√µes novamente
        require_signup = is_signup_required()
        collect_phone = is_phone_collection_enabled()
        collect_email = is_email_collection_enabled()
        
        user_data = get_user_data(user.id)
        
        missing_data = []
        if require_signup and not user_data.get('name'):
            missing_data.append("nome")
        if collect_phone and not user_data.get('phone'):
            missing_data.append("telefone")
        if collect_email and not user_data.get('email'):
            missing_data.append("email")
        
        if missing_data:
            context.user_data['collecting_data'] = True
            context.user_data['missing_data'] = missing_data
            context.user_data['current_data_index'] = 0
            
            await request_missing_data(update, context, missing_data)
        else:
            await query.message.reply_text("‚úÖ Todos os dados j√° foram fornecidos!")
    

    
    elif query.data == "start_flow":
        # Executar fluxo padr√£o
        flows = flow_manager.get_active_flows()
        if flows:
            default_flow = flows[0]  # Primeiro fluxo ativo
            await execute_flow(query, default_flow['id'])
        else:
            await query.message.reply_text("‚ùå Nenhum fluxo configurado.")

async def execute_flow(query, flow_id):
    """Executa um fluxo espec√≠fico"""
    flow_manager = FlowManager()
    steps = flow_manager.get_flow_steps(flow_id)
    
    if not steps:
        await query.message.reply_text("‚ùå Fluxo vazio ou n√£o encontrado.")
        return
    
    # Executar primeira etapa
    await execute_step(query, steps[0])

async def execute_complete_flow(update, steps):
    """Executa todas as etapas de um fluxo"""
    print(f"üîç DEBUG: execute_complete_flow - Executando {len(steps)} steps")
    
    for i, step in enumerate(steps):
        try:
            print(f"üîç DEBUG: Step {i+1}/{len(steps)} - Tipo: {step.get('step_type')} - ID: {step.get('id')}")
            
            # Pr√©-processamento comum para todos os steps com bot√µes
            buttons = []
            if step.get('buttons'):
                for button in step['buttons']:
                    if button['button_type'] == 'url':
                        buttons.append([InlineKeyboardButton(button['button_text'], url=button['button_data'])])
                    else:
                        buttons.append([InlineKeyboardButton(button['button_text'], callback_data=button['button_data'])])
            
            keyboard = InlineKeyboardMarkup(buttons) if buttons else None

            if step['step_type'] == 'text':
                await update.message.reply_text(step['content'], reply_markup=keyboard)

            elif step['step_type'] == 'image':
                print(f"üîç DEBUG: Processando step de imagem")
                print(f"üîç DEBUG: Step completo: {step}")
                await handle_media_send(
                    update,
                    step,
                    keyboard,
                    media_type='photo',
                    method=update.message.reply_photo
                )

            elif step['step_type'] == 'video':
                await handle_media_send(
                    update,
                    step,
                    keyboard,
                    media_type='video',
                    method=update.message.reply_video
                )

            elif step['step_type'] == 'video_note':
                print(f"üîç DEBUG: Tentando enviar video_note")
                
                if step.get('file_id'):
                    try:
                        print(f"üîç DEBUG: Enviando video_note via file_id")
                        # Para v√≠deos redondos, usar reply_video_note
                        print(f"üîç DEBUG: Enviando como reply_video_note")
                        await update.message.reply_video_note(
                            video_note=step['file_id']
                        )
                        
                        # Enviar texto separadamente (video notes n√£o suportam caption)
                        if step.get('content'):
                            await update.message.reply_text(
                                step.get('content', ''),
                                reply_markup=keyboard
                            )
                    except Exception as e:
                        print(f"üîç DEBUG: Erro no video_note (file_id): {e}")
                        await handle_video_note_fallback(update, step, keyboard)
                
                elif step.get('media_url'):
                    try:
                        print(f"üîç DEBUG: Enviando video_note via media_url")
                        
                        if step['media_url'].startswith('uploads/') or step['media_url'].startswith('uploads\\'):
                            print(f"üîç DEBUG: Usando arquivo local: {step['media_url']}")
                            with open(step['media_url'], 'rb') as f:
                                file_data = f.read()
                            print(f"üîç DEBUG: Arquivo lido, tamanho: {len(file_data)} bytes")
                            
                            # Validar requisitos antes de enviar
                            print(f"üîç DEBUG: Validando requisitos do video note antes do envio...")
                            is_valid, validation_message = await validate_video_note_requirements(file_data)
                            
                            if not is_valid:
                                print(f"üîç DEBUG: Video note inv√°lido: {validation_message}")
                                
                                # Tentar convers√£o autom√°tica
                                print(f"üîß DEBUG: Tentando convers√£o autom√°tica...")
                                conversion_success, converted_data, conversion_message = await convert_video_to_video_note(file_data)
                                
                                if conversion_success:
                                    print(f"üîß DEBUG: Convers√£o bem-sucedida: {conversion_message}")
                                    
                                    # Substituir o arquivo original pelo convertido
                                    try:
                                        print(f"üîß DEBUG: Substituindo arquivo original pelo convertido...")
                                        
                                        # Salvar v√≠deo convertido no lugar do original
                                        if step['media_url'].startswith('uploads/') or step['media_url'].startswith('uploads\\'):
                                            # Para arquivos locais, substituir diretamente
                                            with open(step['media_url'], 'wb') as f:
                                                f.write(converted_data)
                                            
                                            print(f"üîß DEBUG: ‚úÖ Arquivo original substitu√≠do: {step['media_url']}")
                                            
                                            # Atualizar o banco de dados para marcar como convertido
                                            from flow_manager import update_step_media_url
                                            update_step_media_url(step['id'], step['media_url'])
                                            
                                        else:
                                            # Para URLs remotas, salvar localmente
                                            temp_filename = f"converted_{int(asyncio.get_event_loop().time())}.mp4"
                                            temp_path = UPLOADS_DIR / "video_note" / temp_filename
                                            temp_path.parent.mkdir(exist_ok=True)
                                            
                                            with open(temp_path, 'wb') as f:
                                                f.write(converted_data)
                                            
                                            # Atualizar o banco de dados com o novo caminho
                                            from flow_manager import update_step_media_url
                                            update_step_media_url(step['id'], str(temp_path))
                                            
                                            print(f"üîß DEBUG: ‚úÖ Arquivo convertido salvo: {temp_path}")
                                        
                                    except Exception as e:
                                        print(f"üîß DEBUG: ‚ö†Ô∏è Erro ao substituir arquivo: {e}")
                                    
                                    # Enviar v√≠deo convertido com retry
                                    max_retries = 3
                                    for attempt in range(max_retries):
                                        try:
                                            print(f"üîß DEBUG: Tentativa {attempt + 1}/{max_retries} de envio")
                                            
                                            # Enviar v√≠deo convertido como video_note com timeout
                                            await asyncio.wait_for(
                                                update.message.reply_video_note(
                                                    video_note=converted_data
                                                ),
                                                timeout=30.0  # 30 segundos de timeout
                                            )
                                            
                                            # Enviar texto separadamente (video notes n√£o suportam caption)
                                            if step.get('content'):
                                                await update.message.reply_text(
                                                    step.get('content', ''),
                                                    reply_markup=keyboard
                                                )
                                            
                                            print(f"üîß DEBUG: ‚úÖ Envio bem-sucedido na tentativa {attempt + 1}")
                                            break
                                            
                                        except asyncio.TimeoutError:
                                            print(f"üîß DEBUG: ‚è∞ Timeout na tentativa {attempt + 1}")
                                            if attempt == max_retries - 1:
                                                await update.message.reply_text(
                                                    f"‚ö†Ô∏è **Timeout no Envio**\n\n"
                                                    "O v√≠deo foi convertido com sucesso, mas houve timeout no envio.\n"
                                                    "Tente novamente em alguns segundos.",
                                                    reply_markup=keyboard
                                                )
                                            else:
                                                await asyncio.sleep(2)  # Aguardar 2 segundos antes da pr√≥xima tentativa
                                                
                                        except Exception as e:
                                            print(f"üîß DEBUG: ‚ùå Erro na tentativa {attempt + 1}: {e}")
                                            if attempt == max_retries - 1:
                                                await update.message.reply_text(
                                                    f"‚ùå **Erro no Envio**\n\n"
                                                    "O v√≠deo foi convertido, mas houve erro no envio.\n"
                                                    "Tente novamente.",
                                                    reply_markup=keyboard
                                                )
                                            else:
                                                await asyncio.sleep(2)
                                else:
                                    print(f"üîß DEBUG: Convers√£o falhou: {conversion_message}")
                                    await update.message.reply_text(
                                        f"‚ùå **Erro ao enviar video note**\n\n{validation_message}\n\n"
                                        "Tentativa de convers√£o autom√°tica falhou.\n"
                                        "O v√≠deo n√£o atende aos requisitos do Telegram.",
                                        reply_markup=keyboard
                                    )
                                return
                            
                            print(f"üîç DEBUG: {validation_message}")
                            
                            # Para v√≠deos redondos, usar reply_video_note
                            print(f"üîç DEBUG: Enviando como reply_video_note")
                            await update.message.reply_video_note(
                                video_note=file_data
                            )
                            
                            # Enviar texto separadamente (video notes n√£o suportam caption)
                            if step.get('content'):
                                await update.message.reply_text(
                                    step.get('content', ''),
                                    reply_markup=keyboard
                                )
                        else:
                            # Verificar se √© um arquivo local (mesmo que n√£o comece com 'uploads/')
                            if not step['media_url'].startswith(('http://', 'https://', 'ftp://')):
                                print(f"üîç DEBUG: Usando arquivo local: {step['media_url']}")
                                try:
                                    # Tentar abrir como arquivo local
                                    with open(step['media_url'], 'rb') as f:
                                        file_data = f.read()
                                    print(f"üîç DEBUG: Arquivo local lido, tamanho: {len(file_data)} bytes")
                                    
                                    # Validar requisitos antes de enviar
                                    print(f"üîç DEBUG: Validando requisitos do video note antes do envio...")
                                    is_valid, validation_message = await validate_video_note_requirements(file_data)
                                    
                                    if not is_valid:
                                        print(f"üîç DEBUG: Video note inv√°lido: {validation_message}")
                                        
                                        # Tentar convers√£o autom√°tica
                                        print(f"üîß DEBUG: Tentando convers√£o autom√°tica...")
                                        conversion_success, converted_data, conversion_message = await convert_video_to_video_note(file_data)
                                        
                                        if conversion_success:
                                            print(f"üîß DEBUG: Convers√£o bem-sucedida: {conversion_message}")
                                            
                                            # Substituir o arquivo original pelo convertido
                                            try:
                                                print(f"üîß DEBUG: Substituindo arquivo original pelo convertido...")
                                                
                                                # Salvar v√≠deo convertido no lugar do original
                                                with open(step['media_url'], 'wb') as f:
                                                    f.write(converted_data)
                                                
                                                print(f"üîß DEBUG: ‚úÖ Arquivo original substitu√≠do: {step['media_url']}")
                                                
                                                # Atualizar o banco de dados para marcar como convertido
                                                from flow_manager import update_step_media_url
                                                update_step_media_url(step['id'], step['media_url'])
                                                
                                            except Exception as e:
                                                print(f"üîß DEBUG: ‚ö†Ô∏è Erro ao substituir arquivo: {e}")
                                            
                                            # Enviar v√≠deo convertido com retry
                                            max_retries = 3
                                            for attempt in range(max_retries):
                                                try:
                                                    print(f"üîß DEBUG: Tentativa {attempt + 1}/{max_retries} de envio")
                                                    
                                                    # Enviar v√≠deo convertido como video_note com timeout
                                                    await asyncio.wait_for(
                                                        update.message.reply_video_note(
                                                            video_note=converted_data
                                                        ),
                                                        timeout=30.0  # 30 segundos de timeout
                                                    )
                                                    
                                                    # Enviar texto separadamente (video notes n√£o suportam caption)
                                                    if step.get('content'):
                                                        await update.message.reply_text(
                                                            step.get('content', ''),
                                                            reply_markup=keyboard
                                                        )
                                                    
                                                    
                                                    print(f"üîß DEBUG: ‚úÖ Envio bem-sucedido na tentativa {attempt + 1}")
                                                    break
                                                    
                                                except asyncio.TimeoutError:
                                                    print(f"üîß DEBUG: ‚è∞ Timeout na tentativa {attempt + 1}")
                                                    if attempt == max_retries - 1:
                                                        await update.message.reply_text(
                                                            f"‚ö†Ô∏è **Timeout no Envio**\n\n"
                                                            "O v√≠deo foi convertido com sucesso, mas houve timeout no envio.\n"
                                                            "Tente novamente em alguns segundos.",
                                                            reply_markup=keyboard
                                                        )
                                                    else:
                                                        await asyncio.sleep(2)  # Aguardar 2 segundos antes da pr√≥xima tentativa
                                                        
                                                except Exception as e:
                                                    print(f"üîß DEBUG: ‚ùå Erro na tentativa {attempt + 1}: {e}")
                                                    if attempt == max_retries - 1:
                                                        await update.message.reply_text(
                                                            f"‚ùå **Erro no Envio**\n\n"
                                                            "O v√≠deo foi convertido, mas houve erro no envio.\n"
                                                            "Tente novamente.",
                                                            reply_markup=keyboard
                                                        )
                                                    else:
                                                        await asyncio.sleep(2)
                                        else:
                                            print(f"üîß DEBUG: Convers√£o falhou: {conversion_message}")
                                            await update.message.reply_text(
                                                f"‚ùå **Erro ao enviar video note**\n\n{validation_message}\n\n"
                                                "Tentativa de convers√£o autom√°tica falhou.\n"
                                                "O v√≠deo n√£o atende aos requisitos do Telegram.",
                                                reply_markup=keyboard
                                            )
                                        return
                                    
                                    print(f"üîç DEBUG: {validation_message}")
                                    
                                    # Para v√≠deos redondos, usar reply_video_note
                                    print(f"üîç DEBUG: Enviando como reply_video_note")
                                    await update.message.reply_video_note(
                                        video_note=file_data
                                    )
                                    
                                    # Enviar texto separadamente (video notes n√£o suportam caption)
                                    if step.get('content'):
                                        await update.message.reply_text(
                                            step.get('content', ''),
                                            reply_markup=keyboard
                                        )
                                        
                                except FileNotFoundError:
                                    print(f"üîç DEBUG: Arquivo local n√£o encontrado: {step['media_url']}")
                                    await handle_video_note_fallback(update, step, keyboard)
                                except Exception as e:
                                    print(f"üîç DEBUG: Erro ao ler arquivo local: {e}")
                                    await handle_video_note_fallback(update, step, keyboard)
                            else:
                                print(f"üîç DEBUG: Usando URL remota: {step['media_url']}")
                                async with aiohttp.ClientSession() as session:
                                    async with session.get(step['media_url']) as response:
                                        if response.status == 200:
                                                                                    file_data = await response.read()
                                        print(f"üîç DEBUG: Arquivo baixado, tamanho: {len(file_data)} bytes")
                                        
                                        # Validar requisitos antes de enviar
                                        print(f"üîç DEBUG: Validando requisitos do video note antes do envio...")
                                        is_valid, validation_message = await validate_video_note_requirements(file_data)
                                        
                                        if not is_valid:
                                            print(f"üîç DEBUG: Video note inv√°lido: {validation_message}")
                                            
                                            # Tentar convers√£o autom√°tica
                                            print(f"üîß DEBUG: Tentando convers√£o autom√°tica (URL)...")
                                            conversion_success, converted_data, conversion_message = await convert_video_to_video_note(file_data)
                                            
                                            if conversion_success:
                                                print(f"üîß DEBUG: Convers√£o bem-sucedida (URL): {conversion_message}")
                                                
                                                # Substituir o arquivo original pelo convertido
                                                try:
                                                    print(f"üîß DEBUG: Substituindo arquivo original pelo convertido (URL)...")
                                                    
                                                    # Para URLs remotas, salvar localmente
                                                    temp_filename = f"converted_{int(asyncio.get_event_loop().time())}.mp4"
                                                    temp_path = UPLOADS_DIR / "video_note" / temp_filename
                                                    temp_path.parent.mkdir(exist_ok=True)
                                                    
                                                    with open(temp_path, 'wb') as f:
                                                        f.write(converted_data)
                                                    
                                                    # Atualizar o banco de dados com o novo caminho
                                                    from flow_manager import update_step_media_url
                                                    update_step_media_url(step['id'], str(temp_path))
                                                    
                                                    print(f"üîß DEBUG: ‚úÖ Arquivo convertido salvo: {temp_path}")
                                                    
                                                except Exception as e:
                                                    print(f"üîß DEBUG: ‚ö†Ô∏è Erro ao substituir arquivo (URL): {e}")
                                                
                                                # Enviar v√≠deo convertido com retry
                                                max_retries = 3
                                                for attempt in range(max_retries):
                                                    try:
                                                        print(f"üîß DEBUG: Tentativa {attempt + 1}/{max_retries} de envio (URL)")
                                                        
                                                        # Enviar v√≠deo convertido como video_note com timeout
                                                        await asyncio.wait_for(
                                                            update.message.reply_video_note(
                                                                video_note=converted_data
                                                            ),
                                                            timeout=30.0  # 30 segundos de timeout
                                                        )
                                                        
                                                        # Enviar texto separadamente (video notes n√£o suportam caption)
                                                        if step.get('content'):
                                                            await update.message.reply_text(
                                                                step.get('content', ''),
                                                                reply_markup=keyboard
                                                            )
                                                        
                                                        
                                                        print(f"üîß DEBUG: ‚úÖ Envio bem-sucedido na tentativa {attempt + 1} (URL)")
                                                        break
                                                        
                                                    except asyncio.TimeoutError:
                                                        print(f"üîß DEBUG: ‚è∞ Timeout na tentativa {attempt + 1} (URL)")
                                                        if attempt == max_retries - 1:
                                                            await update.message.reply_text(
                                                                f"‚ö†Ô∏è **Timeout no Envio**\n\n"
                                                                "O v√≠deo foi convertido com sucesso, mas houve timeout no envio.\n"
                                                                "Tente novamente em alguns segundos.",
                                                                reply_markup=keyboard
                                                            )
                                                        else:
                                                            await asyncio.sleep(2)  # Aguardar 2 segundos antes da pr√≥xima tentativa
                                                            
                                                    except Exception as e:
                                                        print(f"üîß DEBUG: ‚ùå Erro na tentativa {attempt + 1} (URL): {e}")
                                                        if attempt == max_retries - 1:
                                                            await update.message.reply_text(
                                                                f"‚ùå **Erro no Envio**\n\n"
                                                                "O v√≠deo foi convertido, mas houve erro no envio.\n"
                                                                "Tente novamente.",
                                                                reply_markup=keyboard
                                                            )
                                                        else:
                                                            await asyncio.sleep(2)
                                            else:
                                                print(f"üîß DEBUG: Convers√£o falhou (URL): {conversion_message}")
                                                await update.message.reply_text(
                                                    f"‚ùå **Erro ao enviar video note**\n\n{validation_message}\n\n"
                                                    "Tentativa de convers√£o autom√°tica falhou.\n"
                                                    "O v√≠deo n√£o atende aos requisitos do Telegram.",
                                                    reply_markup=keyboard
                                                )
                                            return
                                        
                                        print(f"üîç DEBUG: {validation_message}")
                                        
                                        # Para v√≠deos redondos, usar reply_video_note
                                        print(f"üîç DEBUG: Enviando como reply_video_note")
                                        await update.message.reply_video_note(
                                            video_note=file_data
                                        )
                                        
                                        # Enviar texto separadamente (video notes n√£o suportam caption)
                                        if step.get('content'):
                                            await update.message.reply_text(
                                                step.get('content', ''),
                                                reply_markup=keyboard
                                            )
#                                     else:
                                        raise Exception(f"HTTP {response.status}")
                    except Exception as e:
                        print(f"üîç DEBUG: Erro no video_note (media_url): {e}")
                        await handle_video_note_fallback(update, step, keyboard)
                else:
                    await handle_fallback(update, step, keyboard)

            elif step['step_type'] == 'button':
                await update.message.reply_text(
                    step['content'] or "Escolha uma op√ß√£o:",
                    reply_markup=keyboard
                )

            # Pequena pausa entre as mensagens
            await asyncio.sleep(0.5)
            
        except Exception as e:
            print(f"Erro ao executar etapa {i+1}: {e}")
            continue

async def handle_media_send(update, step, keyboard, media_type, method):
    """Manipula o envio de m√≠dia gen√©rica"""
    print(f"üîç DEBUG: handle_media_send - Tipo: {media_type}")
    print(f"üîç DEBUG: Step data: {step}")
    print(f"üîç DEBUG: Tem file_id: {step.get('file_id')}")
    print(f"üîç DEBUG: Tem media_url: {step.get('media_url')}")
    print(f"üîç DEBUG: Tem content: {step.get('content')}")
    
    try:
        if step.get('file_id'):
            print(f"üîç DEBUG: Enviando via file_id: {step['file_id']}")
            await method(
                **{media_type: step['file_id']},
                caption=step.get('content', ''),
                reply_markup=keyboard
            )
            print(f"üîç DEBUG: ‚úÖ Envio via file_id bem-sucedido")
        elif step.get('media_url'):
            print(f"üîç DEBUG: Enviando via media_url: {step['media_url']}")
            
            if step['media_url'].startswith('uploads/') or step['media_url'].startswith('uploads\\'):
                print(f"üîç DEBUG: Usando arquivo local: {step['media_url']}")
                try:
                    with open(step['media_url'], 'rb') as f:
                        file_data = f.read()
                    print(f"üîç DEBUG: Arquivo lido, tamanho: {len(file_data)} bytes")
                    
                    await method(
                        **{media_type: file_data},
                        caption=step.get('content', ''),
                        reply_markup=keyboard
                    )
                    print(f"üîç DEBUG: ‚úÖ Envio de arquivo local bem-sucedido")
                except FileNotFoundError:
                    print(f"üîç DEBUG: ‚ùå Arquivo n√£o encontrado: {step['media_url']}")
                    raise Exception(f"Arquivo n√£o encontrado: {step['media_url']}")
                except Exception as e:
                    print(f"üîç DEBUG: ‚ùå Erro ao ler arquivo local: {e}")
                    raise e
            else:
                print(f"üîç DEBUG: Usando URL remota: {step['media_url']}")
                async with aiohttp.ClientSession() as session:
                    async with session.get(step['media_url']) as response:
                        if response.status == 200:
                            file_data = await response.read()
                            print(f"üîç DEBUG: Arquivo baixado, tamanho: {len(file_data)} bytes")
                            
                            await method(
                                **{media_type: file_data},
                                caption=step.get('content', ''),
                                reply_markup=keyboard
                            )
                            print(f"üîç DEBUG: ‚úÖ Envio de URL remota bem-sucedido")
                        else:
                            print(f"üîç DEBUG: ‚ùå HTTP {response.status} para URL: {step['media_url']}")
                            raise Exception(f"HTTP {response.status}")
        else:
            print(f"üîç DEBUG: ‚ùå Nenhum file_id ou media_url encontrado, usando fallback")
            await handle_fallback(update, step, keyboard)
    except Exception as e:
        print(f"üîç DEBUG: ‚ùå Erro ao enviar {media_type}: {e}")
        await handle_fallback(update, step, keyboard)

async def handle_fallback(update, step, keyboard):
    """Fallback gen√©rico quando o envio de m√≠dia falha"""
    await update.message.reply_text(
        f"{step.get('content', 'Conte√∫do n√£o dispon√≠vel')}",
        reply_markup=keyboard
    )

async def handle_video_note_fallback(update, step, keyboard):
    """Fallback espec√≠fico para video_note"""
    try:
        if step.get('media_url'):
            if step['media_url'].startswith('uploads/') or step['media_url'].startswith('uploads\\'):
                with open(step['media_url'], 'rb') as f:
                    await update.message.reply_video(
                        video=f,
                        caption=step.get('content', ''),
                        reply_markup=keyboard,
                        width=512,
                        height=512
                    )
            else:
                async with aiohttp.ClientSession() as session:
                    async with session.get(step['media_url']) as response:
                        if response.status == 200:
                            await update.message.reply_video(
                                video=await response.read(),
                                caption=step.get('content', ''),
                                reply_markup=keyboard,
                                width=512,
                                height=512
                            )
                        else:
                            await handle_fallback(update, step, keyboard)
        else:
            await handle_fallback(update, step, keyboard)
    except Exception as e:
        print(f"üîç DEBUG: Fallback para video_note tamb√©m falhou: {e}")
        await handle_fallback(update, step, keyboard)


async def execute_step(query, step):
    """Executa uma etapa espec√≠fica"""
    if step['step_type'] == 'text':
        # Verificar se h√° bot√µes para este step de texto
        buttons = []
        if step.get('buttons'):
            for button in step['buttons']:
                if button['button_type'] == 'url':
                    buttons.append([InlineKeyboardButton(button['button_text'], url=button['button_data'])])
                else:
                    buttons.append([InlineKeyboardButton(button['button_text'], callback_data=button['button_data'])])
        
        keyboard = InlineKeyboardMarkup(buttons) if buttons else None
        await safe_edit_message(step['content'], reply_markup=keyboard)
    elif step['step_type'] == 'image':
        if step['media_url']:
            try:
                # Verificar se √© um arquivo local
                if step['media_url'].startswith('uploads/') or step['media_url'].startswith('uploads\\'):
                    # Arquivo local
                    with open(step['media_url'], 'rb') as f:
                        file_data = f.read()
                    await query.edit_message_media(
                        media=InputMediaPhoto(file_data, caption=step['content'] or "")
                    )
                else:
                    # URL remota
                    await query.edit_message_media(
                        media=InputMediaPhoto(step['media_url'], caption=step['content'] or "")
                    )
            except Exception as e:
                print(f"Erro ao editar imagem: {e}")
    elif step['step_type'] == 'video':
        if step['media_url']:
            try:
                # Verificar se √© um arquivo local
                if step['media_url'].startswith('uploads/') or step['media_url'].startswith('uploads\\'):
                    # Arquivo local
                    with open(step['media_url'], 'rb') as f:
                        file_data = f.read()
                    await query.edit_message_media(
                        media=InputMediaVideo(file_data, caption=step['content'] or "")
                    )
                else:
                    # URL remota
                    await query.edit_message_media(
                        media=InputMediaVideo(step['media_url'], caption=step['content'] or "")
                    )
            except Exception as e:
                print(f"Erro ao editar v√≠deo: {e}")
    elif step['step_type'] == 'video_note':
        # Para v√≠deos redondos, sempre usar reply_video com dimens√µes 512x512
        # O Telegram s√≥ aceita v√≠deos redondos reais no sendVideoNote
        is_converted_video = True
        
        if step['media_url']:
            try:
                # Verificar se √© um arquivo local
                if step['media_url'].startswith('uploads/') or step['media_url'].startswith('uploads\\'):
                    # Arquivo local
                    with open(step['media_url'], 'rb') as f:
                        file_data = f.read()
                    
                    # Validar requisitos antes de enviar
                    print(f"üîç DEBUG: Validando requisitos do video note em execute_step...")
                    is_valid, validation_message = await validate_video_note_requirements(file_data)
                    
                    if not is_valid:
                        print(f"üîç DEBUG: Video note inv√°lido em execute_step: {validation_message}")
                        
                        # Tentar convers√£o autom√°tica
                        print(f"üîß DEBUG: Tentando convers√£o autom√°tica em execute_step...")
                        conversion_success, converted_data, conversion_message = await convert_video_to_video_note(file_data)
                        
                        if conversion_success:
                            print(f"üîß DEBUG: Convers√£o bem-sucedida em execute_step: {conversion_message}")
                            
                            # Substituir o arquivo original pelo convertido
                            try:
                                print(f"üîß DEBUG: Substituindo arquivo original pelo convertido em execute_step...")
                                
                                # Salvar v√≠deo convertido no lugar do original
                                with open(step['media_url'], 'wb') as f:
                                    f.write(converted_data)
                                
                                print(f"üîß DEBUG: ‚úÖ Arquivo original substitu√≠do: {step['media_url']}")
                                
                                # Atualizar o banco de dados para marcar como convertido
                                from flow_manager import update_step_media_url
                                update_step_media_url(step['id'], step['media_url'])
                                
                            except Exception as e:
                                print(f"üîß DEBUG: ‚ö†Ô∏è Erro ao substituir arquivo em execute_step: {e}")
                            
                            # Enviar v√≠deo convertido
                            await query.message.reply_video_note(video_note=converted_data)
                            
                            # Enviar texto separadamente (video notes n√£o suportam caption)
                            if step.get('content'):
                                await query.message.reply_text(step['content'])
                            
                        else:
                            print(f"üîß DEBUG: Convers√£o falhou em execute_step: {conversion_message}")
                            await query.message.reply_text(
                                f"‚ùå **Erro ao enviar video note**\n\n{validation_message}\n\n"
                                "Tentativa de convers√£o autom√°tica falhou.\n"
                                "O v√≠deo n√£o atende aos requisitos do Telegram."
                            )
                        return
                    
                    print(f"üîç DEBUG: {validation_message}")
                    
                    # Para v√≠deos redondos, sempre usar reply_video_note
                    await query.message.reply_video_note(video_note=file_data)
                    
                    # Enviar texto separadamente (video notes n√£o suportam caption)
                    if step.get('content'):
                        await query.message.reply_text(step['content'])
                else:
                    # URL remota (fallback)
                    async with aiohttp.ClientSession() as session:
                        async with session.get(step['media_url']) as response:
                            if response.status == 200:
                                file_data = await response.read()
                                
                                # Validar requisitos antes de enviar
                                print(f"üîç DEBUG: Validando requisitos do video note em execute_step (URL)...")
                                is_valid, validation_message = await validate_video_note_requirements(file_data)
                                
                                if not is_valid:
                                    print(f"üîç DEBUG: Video note inv√°lido em execute_step (URL): {validation_message}")
                                    await query.message.reply_text(
                                        f"‚ùå **Erro ao enviar video note**\n\n{validation_message}\n\n"
                                        "O v√≠deo n√£o atende aos requisitos do Telegram.",
                                    )
                                    return
                                
                                print(f"üîç DEBUG: {validation_message}")
                                
                                # Para v√≠deos redondos, sempre usar reply_video_note
                                await query.message.reply_video_note(video_note=file_data)
                                
                                # Enviar texto separadamente (video notes n√£o suportam caption)
                                if step.get('content'):
                                    await query.message.reply_text(step['content'])
                            else:
                                await safe_edit_message("V√≠deo redondo n√£o dispon√≠vel")
            except Exception as e:
                print(f"Erro ao enviar v√≠deo redondo: {e}")
                await safe_edit_message("V√≠deo redondo n√£o dispon√≠vel")
        else:
            await safe_edit_message(step['content'] or "")
    elif step['step_type'] == 'button':
        # Criar bot√µes inline
        buttons = []
        if step['button_text']:
            buttons.append([InlineKeyboardButton(step['button_text'], callback_data=f"step_{step['id']}")])
        
        keyboard = InlineKeyboardMarkup(buttons) if buttons else None
        await safe_edit_message(
            step['content'] or "Escolha uma op√ß√£o:",
            reply_markup=keyboard
        )

def get_user_data(telegram_id):
    """Obt√©m dados adicionais do usu√°rio"""
    connection = create_connection()
    if connection is None:
        return {}
    
    try:
        cursor = connection.cursor(dictionary=True)
        
        query = """
        SELECT name, phone, email, additional_data 
        FROM users 
        WHERE telegram_id = %s
        """
        cursor.execute(query, (telegram_id,))
        result = cursor.fetchone()
        
        if result:
            return result
        else:
            return {}
            
    except Error as e:
        print(f"Erro ao obter dados do usu√°rio: {e}")
        return {}
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

def update_user_data(telegram_id, data):
    """Atualiza dados adicionais do usu√°rio"""
    connection = create_connection()
    if connection is None:
        return False
    
    try:
        cursor = connection.cursor()
        
        # Construir query dinamicamente baseada nos dados fornecidos
        update_fields = []
        values = []
        
        if 'name' in data:
            update_fields.append("name = %s")
            values.append(data['name'])
        if 'phone' in data:
            update_fields.append("phone = %s")
            values.append(data['phone'])
        if 'email' in data:
            update_fields.append("email = %s")
            values.append(data['email'])
        if 'additional_data' in data:
            update_fields.append("additional_data = %s")
            values.append(data['additional_data'])
        
        if not update_fields:
            return False
        
        values.append(telegram_id)
        query = f"UPDATE users SET {', '.join(update_fields)} WHERE telegram_id = %s"
        
        cursor.execute(query, values)
        connection.commit()
        return True
        
    except Error as e:
        print(f"Erro ao atualizar dados do usu√°rio: {e}")
        return False
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

async def request_missing_data(update, context, missing_data):
    """Solicita dados faltantes do usu√°rio"""
    user = update.effective_user
    
    print(f"üîç DEBUG: request_missing_data - Usu√°rio {user.id} - Dados faltantes: {missing_data}")

    # Enviar v√≠deo redondo de boas-vindas antes do cadastro (se configurado)
    from flow_manager import send_welcome_video_note_for_signup
    print(f"üîç DEBUG: Chamando send_welcome_video_note_for_signup para usu√°rio {user.id}")
    video_sent = await send_welcome_video_note_for_signup(update, context)
    print(f"üîç DEBUG: Resultado send_welcome_video_note_for_signup: {video_sent}")
    
    # Aguardar um pouco se o v√≠deo foi enviado
    if video_sent:
        print(f"üîç DEBUG: V√≠deo enviado, aguardando 1 segundo...")
        await asyncio.sleep(1)

    # Definir estado de coleta de dados
    context.user_data['collecting_data'] = True
    context.user_data['missing_data'] = missing_data
    context.user_data['current_data_index'] = 0

    # Verificar dados j√° coletados para atualizar a lista
    collected_phone = context.user_data.get('collected_phone', None)
    collected_email = context.user_data.get('collected_email', None)
    
    # Filtrar dados que ainda faltam
    remaining_data = []
    for data_type in missing_data:
        if data_type == "telefone" and collected_phone is None:
            remaining_data.append(data_type)
        elif data_type == "email" and collected_email is None:
            remaining_data.append(data_type)
        elif data_type not in ["telefone", "email"]:
            remaining_data.append(data_type)
    
    # Atualizar missing_data com apenas os dados que faltam
    context.user_data['missing_data'] = remaining_data
    
    # Mensagem inicial
    message = "üìã *Cadastro Necess√°rio*\n\n"
    message += "Para continuar, precisamos de algumas informa√ß√µes:\n\n"

    for i, data_type in enumerate(remaining_data, 1):
        message += f"{i}. {data_type.title()}\n"

    message += "\nUse os bot√µes abaixo para compartilhar suas informa√ß√µes:"

    # Criar bot√µes personalizados baseados nos dados que ainda faltam
    buttons = []
    
    # Verificar dados j√° coletados
    collected_data = context.user_data.get('collected_phone', None)
    has_phone = collected_data is not None
    
    collected_email = context.user_data.get('collected_email', None)
    has_email = collected_email is not None
    


    # Mostrar apenas bot√µes para dados que ainda faltam
    if "telefone" in remaining_data and not has_phone:
        buttons.append([KeyboardButton("ÔøΩÔøΩ Compartilhar Telefone", request_contact=True)])
        # Definir estado para esperar contato
        context.user_data['waiting_for_contact'] = True

    if "email" in remaining_data and not has_email:
        buttons.append([KeyboardButton("üìß Enviar Email")])

    buttons.append([KeyboardButton("‚ùå Cancelar")])
    
    # Verificar se todos os dados foram coletados
    if not remaining_data:
        # Todos os dados foram coletados
        await finish_data_collection(update, context)
        return
    
    # Verifica√ß√£o adicional: se n√£o h√° bot√µes al√©m do cancelar, finalizar
    if len(buttons) == 1:  # S√≥ tem o bot√£o cancelar
        await finish_data_collection(update, context)
        return
    
    # Verifica√ß√£o extra: se todos os dados necess√°rios foram coletados
    required_data = ["telefone", "email"]
    collected_data = []
    if context.user_data.get('collected_phone'):
        collected_data.append("telefone")
    if context.user_data.get('collected_email'):
        collected_data.append("email")
    
    if len(collected_data) == len(required_data):
        # Todos os dados foram coletados
        await finish_data_collection(update, context)
        return

    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def finish_data_collection(update, context):
    """Finaliza a coleta de dados e executa o fluxo automaticamente"""
    user = update.effective_user
    
    # Salvar dados coletados
    collected_data = {}
    if 'collected_name' in context.user_data:
        collected_data['name'] = context.user_data['collected_name']
    if 'collected_phone' in context.user_data:
        collected_data['phone'] = context.user_data['collected_phone']
    if 'collected_email' in context.user_data:
        collected_data['email'] = context.user_data['collected_email']
    
    if collected_data:
        update_user_data(user.id, collected_data)
        
        # Enviar webhook de cadastro conclu√≠do
        user_data = {
            'telegram_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'name': collected_data.get('name'),
            'phone': collected_data.get('phone'),
            'email': collected_data.get('email')
        }
        send_webhook('cadastro_concluido', user_data)

        # Se n√£o h√° fluxo padr√£o, mostrar mensagem
    await update.message.reply_text(
        "‚úÖ **Cadastro foi Conclu√≠do!.",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # Limpar dados tempor√°rios
    context.user_data.clear()
    
    # Executar fluxo automaticamente
    flow_manager = FlowManager()
    default_flow = flow_manager.get_default_flow()
    
    if default_flow:
        steps = flow_manager.get_flow_steps(default_flow['id'])
        if steps:
            # Executar todas as etapas do fluxo
            await execute_complete_flow(update, steps)
            return
    


def get_config_value(config_key, default=None):
    """Obt√©m o valor de uma configura√ß√£o do banco de dados"""
    connection = create_connection()
    if connection is None:
        return default
    
    try:
        cursor = connection.cursor()
        
        query = "SELECT config_value FROM bot_config WHERE config_key = %s"
        cursor.execute(query, (config_key,))
        result = cursor.fetchone()
        
        if result:
            return result[0]
        else:
            return default
            
    except Error as e:
        print(f"Erro ao obter configura√ß√£o '{config_key}': {e}")
        return default
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

def main():
    """Fun√ß√£o principal do bot"""
    
    # Criar tabelas se n√£o existirem
    if not create_tables():
        print("Erro ao criar tabelas. Verifique a conex√£o com o banco de dados.")
        return
    
    # Obter token do bot do banco de dados ou vari√°vel de ambiente
    bot_token = get_config_value('bot_token') or os.getenv('BOT_TOKEN')
    if not bot_token:
        print("Erro: BOT_TOKEN n√£o encontrado no banco de dados ou nas vari√°veis de ambiente.")
        print("Execute o script setup_initial_data.py primeiro para configurar o bot.")
        return
    
    # Criar aplica√ß√£o
    application = Application.builder().token(bot_token).build()
    
    # Adicionar handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("admin", admin_command))
    
    # Handler para callbacks dos bot√µes inline
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # Handler para contatos compartilhados
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact_shared))
    
    # Handler espec√≠fico para v√≠deo redondo (teste)
    application.add_handler(MessageHandler(filters.VIDEO_NOTE, handle_media_input))
    
    # Handler para m√≠dias (fotos, v√≠deos, documentos)
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.Document.ALL, handle_media_input))
    
    # Handler para mensagens de texto (com prioridade para cria√ß√£o de fluxos)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))
    
    # Iniciar o bot
    print("Bot iniciado...")
    application.run_polling()

if __name__ == '__main__':
    main() 
